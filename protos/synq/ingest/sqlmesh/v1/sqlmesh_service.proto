syntax = "proto3";

package synq.ingest.sqlmesh.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "synq/ingest/git/v1/git_context.proto";
import "synq/v1/scope_authorization.proto";

option go_package = "github.com/getsynq/api/ingest/sqlmesh/v1";

message IngestMetadataRequest {
  // Data from /api/meta
  bytes api_meta = 1;
  // Data from /api/models
  bytes models = 2;
  // Data from /api/models/{model_id}
  map<string, bytes> model_details = 3;
  // Data from /api/lineage/{model_id}
  map<string, bytes> model_lineage = 4;
  // Data from /api/files
  bytes files = 5;
  // Data from /api/file/{file_path}
  map<string, bytes> file_content = 10;
  // Data from /api/environments
  bytes environments = 6;
  // Version of the uploader tool
  string uploader_version = 7;
  // Build time of the uploader tool
  string uploader_build_time = 8;
  // Time at which state was collected
  google.protobuf.Timestamp state_at = 9 [(buf.validate.field) = {
    timestamp: {
      lt_now: true
      gt: {seconds: 1640995200}
    }
    required: true
  }];
  // Git context of the project
  synq.ingest.git.v1.GitContext git_context = 11;

  message Error {
    optional string path = 1;
    optional int64 code = 2;
    string message = 3;
  }
  // Optional errors indicating why some data wasn't loaded
  repeated Error errors = 12;
}
message IngestMetadataResponse {}

message IngestExecutionRequest {
  // Command passed to the sqlmesh tool
  repeated string command = 1;
  // Exit code of the sqlmesh command
  int32 exit_code = 2;
  // Standard output log of the SqlMesh command
  bytes std_out = 3;
  // Standard error log of the SqlMesh command
  bytes std_err = 4;
  // Environment variables collected during execution
  map<string, string> environment_vars = 5;
  // Version of the uploader tool
  string uploader_version = 7;
  // Build time of the uploader tool
  string uploader_build_time = 8;
  // Time at which the execution started
  google.protobuf.Timestamp started_at = 9 [(buf.validate.field) = {
    timestamp: {
      lt_now: true
      gt: {seconds: 1640995200}
    }
    required: true
  }];
  // Time at which the execution finished
  google.protobuf.Timestamp finished_at = 10 [(buf.validate.field).timestamp.lt_now = true];
  // Git context of the project
  synq.ingest.git.v1.GitContext git_context = 11;

  option (buf.validate.message).cel = {
    id: "ingest_execution_request.finished_at"
    message: "Finished at must be greater than or equal to started at."
    expression: "this.finished_at >= this.started_at"
  };
}

message IngestExecutionResponse {}

service SqlMeshService {
  rpc IngestMetadata(IngestMetadataRequest) returns (IngestMetadataResponse) {
    option idempotency_level = IDEMPOTENT;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_INGEST_SQLMESH]
    };
  }
  rpc IngestExecution(IngestExecutionRequest) returns (IngestExecutionResponse) {
    option idempotency_level = IDEMPOTENT;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_INGEST_SQLMESH]
    };
  }
}
