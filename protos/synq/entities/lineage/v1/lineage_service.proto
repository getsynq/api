syntax = "proto3";

package synq.entities.lineage.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "synq/entities/lineage/v1/lineage.proto";
import "synq/entities/lineage/v1/lineage_direction.proto";
import "synq/entities/v1/identifier.proto";
import "synq/v1/scope_authorization.proto";

option go_package = "github.com/getsynq/api/entities/lineage/v1";

// LineageService allows you to fetch:
// * Entity level lineage from a starting point of one or more entities.
// * Column Level lineage from a starting point of multiple columns of a single entity.
service LineageService {
  rpc GetLineage(GetLineageRequest) returns (GetLineageResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [
        SCOPE_LINEAGE_READ,
        SCOPE_SRE_AGENT,
        SCOPE_MCP_READ
      ]
    };
    option (google.api.http) = {get: "/api/lineage/v1"};
  }
}

message GetLineageRequest {
  synq.entities.lineage.v1.LineageDirection lineage_direction = 1 [(buf.validate.field) = {required: true}];
  GetLineageStartPoint start_point = 2 [(buf.validate.field) = {required: true}];
  optional int32 max_depth = 3;
}

message GetLineageResponse {
  Lineage lineage = 1;
}

// Possible starting points to get lineage from.
message GetLineageStartPoint {
  oneof from {
    option (buf.validate.oneof) = {required: true};
    EntitiesStartPoint entities = 1;
    EntityColumnsStartPoint entity_columns = 2;
  }
}

message EntitiesStartPoint {
  repeated entities.v1.Identifier entities = 1;
}

message EntityColumnsStartPoint {
  entities.v1.Identifier id = 1 [(buf.validate.field) = {required: true}];
  repeated string column_names = 2 [(buf.validate.field) = {
    repeated: {
      items: {required: true}
    }
  }];
}
