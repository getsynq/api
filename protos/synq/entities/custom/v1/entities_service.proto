syntax = "proto3";

package synq.entities.custom.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "synq/entities/v1/entity.proto";
import "synq/entities/v1/identifier.proto";
import "synq/v1/scope_authorization.proto";

option go_package = "github.com/getsynq/api/entities/custom/v1";

// custom.EntitiesService is a service for managing custom entities. Entities can represent
// various data platform concepts such as services, consumers, applications or data pipelines
// that are not natively available in Synq.
//
// Entities are identified by a unique identifier and can be created, updated, read and deleted.
//
service EntitiesService {
  // Create or update an entity. If the entity does not exist, it will be created, otherwise it will be updated. Entities are identified and deduplicated by their Identifier in a scope of a given customer workspace.
  rpc UpsertEntity(UpsertEntityRequest) returns (UpsertEntityResponse) {
    option idempotency_level = IDEMPOTENT;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_ENTITY_EDIT]
    };
    option (google.api.http) = {
      post: "/api/entities/custom/v1"
      body: "*"
    };
  }

  // Delete an entity by its identifier. If the entity does not exist, it will be a no-op.
  rpc DeleteEntity(DeleteEntityRequest) returns (DeleteEntityResponse) {
    option idempotency_level = IDEMPOTENT;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_ENTITY_EDIT]
    };
    option (google.api.http) = {delete: "/api/entities/custom/v1/{id}"};
  }

  // List all entities.
  rpc ListEntities(ListEntitiesRequest) returns (ListEntitiesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [
        SCOPE_ENTITY_READ,
        SCOPE_SRE_AGENT
      ]
    };
    option (google.api.http) = {get: "/api/entities/custom/v1"};
  }
}

// UpsertEntityRequest is the request message for the UpsertEntity method.
message UpsertEntityRequest {
  // The entity to create or update.
  synq.entities.v1.Entity entity = 1 [(buf.validate.field).required = true];
}

// UpsertEntityResponse is the response message for the UpsertEntity method.
message UpsertEntityResponse {}

// DeleteEntityRequest is the request message for the DeleteEntity method.
message DeleteEntityRequest {
  // Identifier of the entity to delete.
  synq.entities.v1.Identifier id = 1 [(buf.validate.field).required = true];
}

// DeleteEntityResponse is the response message for the DeleteEntity method.
message DeleteEntityResponse {}

message ListEntitiesRequest {}

message ListEntitiesResponse {
  repeated synq.entities.v1.Entity entities = 1;
}
