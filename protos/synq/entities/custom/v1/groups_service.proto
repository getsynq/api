syntax = "proto3";

package synq.entities.custom.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "synq/entities/v1/identifier.proto";
import "synq/v1/scope_authorization.proto";

option go_package = "github.com/getsynq/api/entities/custom/v1";

// GroupsService helps with management of life-cycle of Entities, more specifically their deletion.
// A Group is a identifyable collection of entities such as a specific test suite to manage custom
// tests, infrastructure project to manage custom infrastructure resources, etc.

// It eliminates the need to keep state on client side to remember which assets were already created
// and which should be deleted. The server will keep track of the current state of the group and client
// can always send the intended new state. The server will calculate the diff and entities that are
// no longer present in the group will be removed.
//
// Example:
// 1. group has entities A, B, C at time t1
// 2. client sends group with entities B, C, D at time t2
// 3. server will remove entity A from the system and update the current state of the group to B, C, D
//
// The service is designed to be idempotent and can be called multiple times with the same state without
// causing any side effects.
service GroupsService {
  // ListEntityGroups lists all groups.
  rpc ListEntityGroups(ListEntityGroupsRequest) returns (ListEntityGroupsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [
        SCOPE_ENTITY_READ,
        SCOPE_SRE_AGENT
      ]
    };
  }

  // UpsertEntitiesGroup updates current definition of group to the server. As part of the upsert operation
  // the difference of entity ids is calculated between past state and the current state and entities that are
  // no longer part of the group are removed.
  rpc UpsertEntitiesGroup(UpsertEntitiesGroupRequest) returns (UpsertEntitiesGroupResponse) {
    option idempotency_level = IDEMPOTENT;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_ENTITY_EDIT]
    };
  }

  // DeleteEntitiesGroup deletes a group by its identifier. If the group does not exist, it will be a no-op.
  rpc DeleteEntitiesGroup(DeleteEntitiesGroupRequest) returns (DeleteEntitiesGroupResponse) {
    option idempotency_level = IDEMPOTENT;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_ENTITY_EDIT]
    };
  }
}

message ListEntityGroupsRequest {}

message ListEntityGroupsResponse {
  repeated Group entities_groups = 1;
}

message UpsertEntitiesGroupRequest {
  Group group = 1 [(buf.validate.field).required = true];
}

message UpsertEntitiesGroupResponse {
  repeated synq.entities.v1.Identifier deleted_ids = 1;
}

message DeleteEntitiesGroupRequest {
  string group_id = 1 [(buf.validate.field).required = true];
}

message DeleteEntitiesGroupResponse {}

// Group is a collection of entities.
message Group {
  // Identifier of the group.
  string group_id = 1 [(buf.validate.field).required = true];

  // Identifiers of entities that belong to the group.
  repeated synq.entities.v1.Identifier entity_ids = 2 [(buf.validate.field).required = true];

  // Timestamp when the group was created.
  google.protobuf.Timestamp created_at = 3;

  // Timestamp when the group was last updated.
  google.protobuf.Timestamp updated_at = 4;
}
