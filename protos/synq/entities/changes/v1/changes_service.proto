syntax = "proto3";

package synq.entities.changes.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "synq/entities/v1/entity_change.proto";
import "synq/entities/v1/identifier.proto";
import "synq/v1/scope_authorization.proto";

option go_package = "github.com/getsynq/api/entities/changes/v1";

// ChangesService provides functionality to track and retrieve changes made to entities in the system.
// It supports various types of changes including git commits, schema changes, and SQL definition changes.
// The service is designed to help track the history and evolution of entities over time.
//
// The service supports multiple types of changes:
// - Git commits: Changes made through version control
// - Schema changes: Modifications to database schemas
// - SQL definition changes: Updates to SQL queries and definitions
service ChangesService {
  // List retrieves the history of changes for a specific entity identified by its path.
  // Changes are returned in chronological order (newest first) and include details about the type of change,
  // when it occurred, and who made it.
  rpc List(ListRequest) returns (ListResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [
        SCOPE_ENTITY_READ,
        SCOPE_SRE_AGENT,
        SCOPE_MCP_READ
      ]
    };
    option (google.api.http) = {get: "/api/changes/v1"};
  }

  // BatchChange retrieves multiple entity changes by their IDs in a single request.
  // This is an optimized endpoint for fetching specific changes when you already know their IDs,
  // rather than listing changes for an entity.
  rpc BatchChange(BatchChangeRequest) returns (BatchChangeResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [
        SCOPE_ENTITY_READ,
        SCOPE_SRE_AGENT,
        SCOPE_MCP_READ
      ]
    };
    option (google.api.http) = {
      post: "/api/changes/v1/by-id"
      body: "*"
    };
  }
}

// ListRequest contains the parameters needed to retrieve changes for a specific entity.
message ListRequest {
  // Identifier of the entity to get changes for.
  // This can be a path identifier that uniquely identifies the entity in the system.
  synq.entities.v1.Identifier id = 1 [deprecated = true];

  // Identifiers of entities for which to get changes.
  // Change is returned when it affects id.
  repeated synq.entities.v1.Identifier ids = 4 [(buf.validate.field) = {
    repeated: {
      items: {required: true}
    }
  }];

  // Return changes older than or on `before`. Defaults to `now()`.
  optional google.protobuf.Timestamp change_before = 2;

  // Return changes newer than until. Defaults to before - 7days,
  optional google.protobuf.Timestamp change_after = 3;

  // Return only changes of specific types.
  repeated synq.entities.v1.EntityChangeType limit_to_change_types = 5;
}

// ListResponse contains the list of changes made to the requested entity.
message ListResponse {
  // List of recent changes to the state of entity. Changes are returned from newest to oldest.
  // Each change includes:
  // - The type of change (git commit, schema change, SQL definition change)
  // - When the change occurred
  // - Details specific to the type of change
  // - Metadata about who made the change
  repeated synq.entities.v1.EntityChange changes = 1;
}

// BatchChangeRequest contains the parameters needed to retrieve multiple changes by their IDs.
message BatchChangeRequest {
  // List of change IDs to retrieve. Each ID uniquely identifies a specific change in the system.
  repeated string change_ids = 1;
}

// BatchChangeResponse contains the requested changes mapped by their IDs.
message BatchChangeResponse {
  // Map of change ID to EntityChange. Only includes changes that were found and accessible.
  // Missing changes are omitted from the response.
  map<string, synq.entities.v1.EntityChange> changes = 1;
}
