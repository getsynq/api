syntax = "proto3";

package synq.entities.entities.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "synq/entities/entities/v1/search_hit.proto";
import "synq/entities/v1/entity.proto";
import "synq/entities/v1/entity_types.proto";
import "synq/entities/v1/identifier.proto";
import "synq/queries/v1/query.proto";
import "synq/v1/pagination.proto";
import "synq/v1/scope_authorization.proto";

option go_package = "github.com/getsynq/api/entities/entities/v1";

// EntitiesService is a service for retriving any entity.
//
service EntitiesService {
  // Get specific entity by its identifier.
  rpc GetEntity(GetEntityRequest) returns (GetEntityResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [
        SCOPE_ENTITY_READ,
        SCOPE_SRE_AGENT,
        SCOPE_MCP_READ
      ]
    };
  }

  // Get multiple entities by their identifiers.
  rpc BatchGetEntities(BatchGetEntitiesRequest) returns (BatchGetEntitiesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [
        SCOPE_ENTITY_READ,
        SCOPE_SRE_AGENT,
        SCOPE_MCP_READ
      ]
    };
    option (google.api.http) = {
      post: "/api/entities/v1/by-id"
      body: "*"
    };
  }
  // List entities matching the given filter
  rpc ListEntities(ListEntitiesRequest) returns (ListEntitiesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [
        SCOPE_ENTITY_READ,
        SCOPE_SRE_AGENT,
        SCOPE_MCP_READ
      ]
    };
    option (google.api.http) = {get: "/api/entities/v1"};
  }

  // Search for entities.
  rpc SearchEntities(SearchEntitiesRequest) returns (SearchEntitiesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [
        SCOPE_ENTITY_READ,
        SCOPE_SRE_AGENT,
        SCOPE_MCP_READ
      ]
    };
    option (google.api.http) = {get: "/api/entities/v1/search"};
  }
}

// GetEntityRequest is the request message for the GetEntity method.
message GetEntityRequest {
  // Identifier of the entity to get.
  synq.entities.v1.Identifier id = 1 [(buf.validate.field).required = true];
}

// GetEntityResponse is the response message for the GetEntity method.
message GetEntityResponse {
  // The entity that was retrieved.
  synq.entities.v1.Entity entity = 1;
}

// BatchGetEntitiesRequest is the request message for the BatchGetEntities method.
message BatchGetEntitiesRequest {
  // Identifiers of the entities to get.
  repeated synq.entities.v1.Identifier ids = 1 [(buf.validate.field) = {
    repeated: {
      items: {required: true}
    }
  }];
}

// BatchGetEntitiesResponse is the response message for the BatchGetEntities method.
message BatchGetEntitiesResponse {
  // The entities that were retrieved.
  repeated synq.entities.v1.Entity entities = 1;
}

message ListEntitiesRequest {
  synq.queries.v1.Query query = 1;
  synq.v1.Pagination pagination = 2;
}

message ListEntitiesResponse {
  synq.v1.PageInfo page_info = 1;
  repeated synq.entities.v1.Identifier entity_ids = 2;
}

message SearchEntitiesRequest {
  // Full text search query, it will search in name but also in description and columns of the entities
  string query = 1 [(buf.validate.field) = {
    required: true
    string: {min_len: 1}
  }];
  // Limit results to specific entity types, leave empty to use only the query
  repeated synq.entities.v1.EntityType limit_to_types = 2 [(buf.validate.field) = {
    repeated: {
      items: {required: true}
    }
  }];
  optional uint32 page = 10;
  optional uint32 limit_per_page = 11;
}

message SearchEntitiesResponse {
  // The entities that were retrieved.
  repeated SearchHit hits = 1;
  // Estimated number of all search results
  uint64 estimated_total_hits = 2;
  // Estimated number of all search results by entity type
  repeated EntityTypeSearchFacet entity_type_estimates = 3;
}
