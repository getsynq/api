syntax = "proto3";

package synq.entities.checks.v1;

import "buf/validate/validate.proto";
import "synq/entities/checks/v1/checks.proto";
import "synq/entities/v1/identifier.proto";
import "synq/v1/scope_authorization.proto";

option go_package = "github.com/getsynq/api/entities/checks/v1";

// ChecksCoverageService provides functionality to retrieve and analyze the coverage of checks
// for entities in the system. It helps track which checks are applied to entities, including
// both direct checks and propagated checks from upstream entities.
service ChecksCoverageService {
  // GetCoverage retrieves the coverage of checks for a specific entity.
  // This includes both direct checks applied to the entity and checks propagated
  // from upstream entities. The response provides detailed information about:
  // - Table-level checks
  // - Column-level checks
  // - Check propagation paths
  // - Column usage statistics
  rpc GetCoverage(GetCoverageRequest) returns (GetCoverageResponse) {
    option (synq.v1.scope_authorization) = {
      scopes: [
        SCOPE_ENTITY_READ,
        SCOPE_SRE_AGENT
      ]
    };
  }
}

// GetCoverageRequest contains the parameters needed to retrieve check coverage for a specific entity.
message GetCoverageRequest {
  // Identifier of the entity to get checks coverage for.
  // This can be a path identifier that uniquely identifies the entity in the system.
  synq.entities.v1.Identifier id = 1 [(buf.validate.field).required = true];
}

// GetCoverageResponse contains the check coverage information for the requested entity.
message GetCoverageResponse {
  // ColumnUpstream represents an upstream column that a check is propagated from.
  message ColumnUpstream {
    // Identifier of the upstream entity.
    synq.entities.v1.Identifier id = 1;
    // Name of the column in the upstream entity.
    string column = 2;
  }

  // PropagatedTableCheck represents a check that is propagated from an upstream table.
  message PropagatedTableCheck {
    // The check entity being propagated.
    synq.entities.checks.v1.CheckEntity check = 1;
    // List of upstream entity identifiers where this check originates from.
    repeated synq.entities.v1.Identifier upstream_ids = 2;
  }

  // PropagatedColumnCheck represents a check that is propagated from an upstream column.
  message PropagatedColumnCheck {
    // The check entity being propagated.
    synq.entities.checks.v1.CheckEntity check = 1;
    // List of upstream columns where this check originates from.
    repeated ColumnUpstream propagation = 2;
  }

  // PropagatedColumnChecks contains a list of checks propagated from upstream columns.
  message PropagatedColumnChecks {
    // List of propagated column checks.
    repeated PropagatedColumnCheck checks = 1;
  }

  // ColumnUsage contains statistics about how a column is used by downstream entities.
  message ColumnUsage {
    // Number of times this column is directly used as data.
    int32 used_as_data_direct = 1;
    // Total number of times this column is used as data (including indirect usage).
    int32 used_as_data_cumulative = 2;
    // Number of times this column is directly used in logic (e.g., WHERE clauses).
    int32 used_as_logic_direct = 3;
    // Total number of times this column is used in logic (including indirect usage).
    int32 used_as_logic_cumulative = 4;
  }

  // ChecksSummary provides a comprehensive overview of checks and their coverage.
  message ChecksSummary {
    // ColumnInformation contains detailed information about a specific column.
    message ColumnInformation {
      // Human readable name of the column as present in dbt or data warehouse.
      string name = 1 [(buf.validate.field) = {
        required: true
        string: {
          min_len: 1
          max_len: 255
        }
      }];
      // Native data type of the column as present in data warehouse.
      string native_type = 3;

      // Checks running on current model on this column
      repeated synq.entities.checks.v1.CheckEntity direct_check_entities = 4;
      // Checks running on upstream model column, where this is a passthrough of it
      repeated PropagatedColumnCheck propagated_check_entities = 5;

      // Indicates that there is an expression transforming the data
      bool is_transformed = 6;
      // Indicates that there is a rename operation
      bool is_renamed = 7;
      // Indicates that there is no transformation or rename
      bool is_passthrough = 8;

      // Is this column used by any downstream model column
      bool used_by_downstream = 10;
      // Is any downstream model referencing this column e.g. in WHERE
      bool referenced_by_downstream = 11;
      // Does this column pull any data from upstream
      bool using_upstream = 12;
      // Does this column reference any columns in upstream
      bool referencing_upstream = 13;
      // Statistics about column impact
      ColumnUsage downstream_usage = 14;
    }

    // List of all column names in the entity.
    repeated string all_columns = 1;
    // List of table-level checks applied to this entity.
    repeated synq.entities.checks.v1.CheckEntity table_checks = 4;
    // List of table-level checks propagated from upstream entities.
    repeated PropagatedTableCheck propagated_table_checks = 5;
    // Detailed information about each column in the entity.
    repeated ColumnInformation column_info = 14;
  }

  // The complete coverage information for the requested entity.
  ChecksSummary coverage = 1;
}
