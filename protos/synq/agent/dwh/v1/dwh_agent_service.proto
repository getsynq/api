syntax = "proto3";

package synq.agent.dwh.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "synq/agent/dwh/v1/dwh_agent_task.proto";
import "synq/v1/scope_authorization.proto";

option go_package = "github.com/getsynq/api/agent/dwh/v1";

service DwhAgentService {
  // buf:lint:ignore RPC_NO_CLIENT_STREAMING
  rpc Connect(stream ConnectRequest) returns (stream ConnectResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_INGEST_DWH]
    };
  }
}

message ConnectRequest {
  oneof message {
    option (buf.validate.oneof).required = true;
    Hello hello = 1;
    Log log = 2;
    AgentTaskResponse task_response = 3;
  }
}

message ConnectResponse {
  repeated agent.dwh.v1.AgentTask tasks = 1;
}

message Hello {
  string name = 1;
  string build_version = 2;
  string build_time = 3;
  message AvailableConnection {
    // Identifier which will receive commands
    string connection_id = 1;
    // User provided connection name
    string name = 2;
    // Indicates that agent has that connection disabled
    bool disabled = 3;
    // Type of the DWH, e.g. bigquery, duckdb, clickhouse
    string type = 4;
    // This will be hostname in most cases
    string instance = 5;
    // Enabled databases to query if connection supports multiple databases, can be empty.
    repeated string databases = 6;
  }
  repeated AvailableConnection available_connections = 4;
}

enum LogLevel {
  LOG_LEVEL_UNSPECIFIED = 0;
  LOG_LEVEL_INFO = 1;
  LOG_LEVEL_WARN = 2;
  LOG_LEVEL_ERROR = 3;
}

message Log {
  google.protobuf.Timestamp time = 1;
  string message = 2;
  LogLevel level = 3;
}

message AgentTaskResponse {
  string connection_id = 1 [(buf.validate.field) = {required: true}];
  string task_id = 2 [(buf.validate.field) = {
    required: true
    string: {uuid: true}
  }];
  optional string error = 3;
  optional agent.dwh.v1.AgentTaskData task_data = 4;
}
