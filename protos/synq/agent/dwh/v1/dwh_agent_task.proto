syntax = "proto3";

package synq.agent.dwh.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/getsynq/api/agent/dwh/v1";

message AgentTask {
  string connection_id = 1 [(buf.validate.field) = {required: true}];
  string task_id = 2 [(buf.validate.field) = {
    required: true
    string: {uuid: true}
  }];

  // When this task should execute, if none is specified it will use time of execution
  google.protobuf.Timestamp scheduled_at = 10;
  // After what time this task should stop executing (even in case of errors, retries will be ignored after this time)
  optional google.protobuf.Timestamp deadline_at = 11;
  // When the task was created
  google.protobuf.Timestamp created_at = 12;

  oneof command {
    option (buf.validate.oneof).required = true;
    FetchFullCatalogCommand fetch_full_catalog = 3;
    FetchFullMetricsCommand fetch_full_metrics = 4;
    FetchSegmentsCommand fetch_segments = 7;
    FetchMetricsCommand fetch_metrics = 9;
  }
}

message AgentTaskData {
  oneof data {
    option (buf.validate.oneof) = {required: true};
    FetchSegmentsResult fetch_segments_result = 10;
    FetchMetricsResult fetch_metrics_result = 11;
  }
}

message FetchFullCatalogCommand {}

message FetchFullMetricsCommand {}

message FetchSegmentsCommand {
  SqlQuery sql_query = 1 [(buf.validate.field) = {required: true}];
}
message FetchSegmentsResult {
  message SegmentRow {
    string segment = 1;
    optional int64 count = 2;
  }
  repeated SegmentRow rows = 1;
}

message FetchMetricsCommand {
  SqlQuery sql_query = 1 [(buf.validate.field) = {required: true}];
  // Application specific context around metrics retrieval
  optional string command_context = 1000;
}
message FetchMetricsResult {
  message MetricsRow {}
  repeated MetricsRow rows = 1;
  // Matches command_context of FetchMetricsCommand
  optional string command_context = 1000;
}

message SqlQuery {
  string sql = 1 [(buf.validate.field) = {required: true}];
  optional int64 limit_results = 2;
}
