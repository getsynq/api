syntax = "proto3";

package synq.agent.dwh.v1;

import "buf/validate/validate.proto";

option go_package = "github.com/getsynq/api/agent/dwh/v1";

// BigQuery specific configuration
message BigQueryConf {
  // GCP project ID
  string project_id = 1 [(buf.validate.field) = {required: true}];
  // Service account key JSON
  string service_account_key = 2 [(buf.validate.field) = {}];
  // Location of service account key file
  string service_account_key_file = 3 [(buf.validate.field) = {}];
  // Region for BigQuery resources
  string region = 4 [(buf.validate.field) = {required: true}];
}

message ClickhouseConf {
  // Host address
  string host = 1 [(buf.validate.field) = {
    required: true
    string: {min_len: 1}
  }];
  // Port number
  int32 port = 2 [(buf.validate.field) = {
    required: true
    int32: {
      gt: 0
      lte: 65535
    }
  }];
  // Database name
  string database = 3 [(buf.validate.field) = {}];
  // Username for authentication
  string username = 4 [(buf.validate.field) = {required: true}];
  // Password for authentication
  string password = 5 [(buf.validate.field) = {required: true}];
  // Whether to use disable SSL for connection
  bool allow_insecure = 6;
}

message DatabricksConf {
  string workspace_url = 1 [(buf.validate.field) = {
    required: true
    string: {uri: true}
  }];
  optional string auth_token = 2;
  optional string auth_client = 3;
  optional string auth_secret = 4;
  optional string warehouse = 5;
  bool refresh_table_metrics = 6;
  bool refresh_table_metrics_use_scan = 7;
  bool fetch_table_tags = 8;
  bool use_show_create_table = 9;
}

// MySQL specific configuration
message MySQLConf {
  // Host address
  string host = 1 [(buf.validate.field) = {
    required: true
    string: {min_len: 1}
  }];
  // Port number
  int32 port = 2 [(buf.validate.field) = {
    required: true
    int32: {
      gt: 0
      lte: 65535
    }
  }];
  // Database name
  string database = 3 [(buf.validate.field) = {required: true}];
  // Username for authentication
  string username = 4 [(buf.validate.field) = {required: true}];
  // Password for authentication
  string password = 5 [(buf.validate.field) = {required: true}];
  // Whether to allow insecure connections
  bool allow_insecure = 6;
  // Additional connection parameters
  map<string, string> params = 7;
}

// Postgres specific configuration
message PostgresConf {
  // Host address
  string host = 1 [(buf.validate.field) = {
    required: true
    string: {min_len: 1}
  }];
  // Port number
  int32 port = 2 [(buf.validate.field) = {
    required: false
    int32: {
      gt: 0
      lte: 65535
    }
  }];
  // Database name
  string database = 3 [(buf.validate.field) = {required: true}];
  // Username for authentication
  string username = 4 [(buf.validate.field) = {required: true}];
  // Password for authentication
  string password = 5 [(buf.validate.field) = {required: true}];
  // Whether to allow insecure connections
  bool allow_insecure = 6;
}

// Redshift specific configuration
message RedshiftConf {
  // Host address
  string host = 1 [(buf.validate.field) = {
    required: true
    string: {min_len: 1}
  }];
  // Port number
  int32 port = 2 [(buf.validate.field) = {
    required: true
    int32: {
      gt: 0
      lte: 65535
    }
  }];
  // Database name
  string database = 3 [(buf.validate.field) = {required: true}];
  // Username for authentication
  string username = 4 [(buf.validate.field) = {required: true}];
  // Password for authentication
  string password = 5 [(buf.validate.field) = {required: true}];
  // Estimate table freshness based on query logs
  bool freshness_from_query_logs = 6;
}

// Snowflake specific configuration
message SnowflakeConf {
  // Snowflake account identifier
  string account = 1 [(buf.validate.field) = {required: true}];
  // Virtual warehouse to use
  string warehouse = 2 [(buf.validate.field) = {required: true}];
  // Role to assume
  string role = 3 [(buf.validate.field) = {required: true}];
  // Username for authentication
  string username = 4 [(buf.validate.field) = {}];
  // Password for authentication
  string password = 5 [(buf.validate.field) = {}];
  // Content of Private key used for Snowflake authentication
  string private_key = 6 [(buf.validate.field) = {}];
  // Location of the file containing Private key used for Snowflake authentication
  string private_key_file = 11 [(buf.validate.field) = {}];
  // Passphrase used to decode Private key
  optional string private_key_passphrase = 10;
  // Database to connect to
  repeated string databases = 7;
  // Use GET_DDL to determine queries used for table/view creation
  bool use_get_ddl = 8;
  // Name of the database where ACCOUNT_USAGE schema is present, fallbacks to SNOWFLAKE
  optional string account_usage_db = 9;
}

// Trino specific configuration
message TrinoConf {
  // Snowflake account identifier
  string host = 1 [(buf.validate.field) = {
    string: {hostname: true}
  }];
  // Optional port to use, otherwise it will use the default port 8080
  optional int32 port = 2;
  // Use non-SSL connection to Trino. This should only be enabled if the Trino cluster does not support SSL
  // or if the connection is secured through other means (e.g., a VPN). Defaults to false (SSL enabled).
  optional bool use_plaintext = 3;
  // Username for authentication
  string username = 5 [(buf.validate.field) = {}];
  // Password for authentication
  string password = 6 [(buf.validate.field) = {}];

  // To which catalogs to connect
  repeated string catalogs = 4 [(buf.validate.field) = {
    repeated: {
      items: {required: true}
    }
  }];

  // Use SHOW CREATE VIEW to get views DDLs
  bool no_show_create_view = 7;
  // Use SHOW CREATE TABLE to get tables DDLs
  bool no_show_create_table = 8;
  // Should it fetch system.metadata.materialized_views to get information about Trino MVs
  bool no_materialized_views = 9;
  // Fetch Trino table comments from system.metadata.table_comments
  bool fetch_table_comments = 10;
}
