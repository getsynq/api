syntax = "proto3";

package synq.agent.sre.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "synq/entities/v1/identifier.proto";
import "synq/v1/scope_authorization.proto";

option go_package = "github.com/getsynq/api/agent/sre/v1";

service SreAgentService {
  // buf:lint:ignore RPC_NO_CLIENT_STREAMING
  rpc Connect(stream ConnectRequest) returns (stream ConnectResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_SRE_AGENT]
    };
  }

  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_SRE_AGENT]
    };
  }
}

message ConnectRequest {
  oneof message {
    option (buf.validate.oneof).required = true;
    Hello hello = 1;
    AgentTaskResponse task_response = 3;
  }
}

message ConnectResponse {
  repeated agent.sre.v1.AgentTask tasks = 1;
}

message Hello {
  string name = 1;
  string build_version = 2;
}

message AgentTaskResponse {
  string task_id = 1 [(buf.validate.field) = {
    required: true
    string: {uuid: true}
  }];
  // Human visible message
  string message = 2;
  // Error message indicating a problem
  optional string error = 3;
}

message AgentTask {
  string task_id = 1 [(buf.validate.field) = {
    required: true
    string: {uuid: true}
  }];
  google.protobuf.Timestamp created_at = 2;
  oneof task {
    option (buf.validate.oneof).required = true;
    synq.agent.sre.v1.TriageTask triage = 10;
    synq.agent.sre.v1.SuggestTestsTask suggest_tests = 11;
  }
}

message TriageTask {
  repeated string issue_ids = 1;
}

message SuggestTestsTask {
  repeated synq.entities.v1.Identifier entity_ids = 1;
}

message GetConfigRequest {}

message DwhConnection {
  // This will be connection in the agent or integration_id when managed
  string connection_id = 1;
  // What is the instance of this, e.g. BigQuery project or Databricks workspace
  string instance = 2;
  // Type of the DWH connection
  string type = 3;
  // Databases in this instance, this would be BigQuery dataset or Databricks catalog
  repeated string databases = 4;
  // Extra parameters present on the connection
  map<string, string> parameters = 5;
  // Indicates that SYNQ managed agent can access this connection
  bool agent_access_enabled = 6;
}

message GetConfigResponse {
  // Workspace to which agent is authenticated
  string workspace = 1;
  // Extra instructions used while triaging and concluding issues.
  string triage_system_prompt = 2;
  // Extra instructions used while suggesting tests.
  string tester_system_prompt = 3;
  // Extra instructions describing workspace to which agent is connected.
  string workspace_system_prompt = 4;
  // Description of all DWH connections/integrations configured in SYNQ. Will indicate to the agent
  // that it can't access all the data sources if agent has no connections enabled.
  repeated DwhConnection synq_dwh_connections = 5;
  // Extra instructions describing how issues should be grouped
  string issue_grouping_system_prompt = 6;
  // Indicates that SRE shouldn't group any issues
  bool issue_grouping_disabled = 7;
}
