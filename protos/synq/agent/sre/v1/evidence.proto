syntax = "proto3";

package synq.agent.sre.v1;

import "buf/validate/validate.proto";
import "synq/entities/v1/identifier.proto";

option go_package = "github.com/getsynq/api/agent/sre/v1";

// EvidenceItem represents a single piece of evidence collected during the triage investigation.
// Each evidence item must have a title and one of the specific evidence types.
message EvidenceItem {
  // Unique identifier of the evidence item.
  string evidence_id = 3 [(buf.validate.field) = {
    string: {uuid: true}
  }];

  // List of issue IDs that should be annotated with the provided evidence.
  // Each ID must be a valid UUID.
  repeated string issue_ids = 2 [(buf.validate.field) = {
    required: true
    repeated: {
      items: {
        required: true
        string: {uuid: true}
      }
    }
  }];

  // Brief, descriptive title summarizing the type of evidence collected.
  // This helps in quickly understanding the nature of the evidence.
  string title = 1 [(buf.validate.field) = {required: true}];

  // The specific type of evidence collected during the investigation.
  // Each type provides different insights into the issue being investigated.
  oneof evidence {
    // Historical evidence showing similar past issues that may help understand the current situation.
    synq.agent.sre.v1.HistoryEvidence issue_history = 100;
    // Evidence pointing to the likely root cause of the issue.
    synq.agent.sre.v1.RootCauseEvidence root_cause = 101;
    // Evidence showing related issues that may be connected to the current investigation.
    synq.agent.sre.v1.RelatedIssueEvidence related_issue = 102;
    // Evidence of recent changes that may have contributed to the issue.
    synq.agent.sre.v1.ChangeEvidence change = 103;
    // Evidence containing detailed analysis of the issue.
    // DEPRECATED: This type will be gradually retired in favor of more specific evidence types
    // like DataQueryEvidenceV2 and OtherEvidence. Please use those types for new evidence.
    synq.agent.sre.v1.AnalysisEvidence analysis = 104 [deprecated = true];
    // Evidence containing code changes and commit information.
    synq.agent.sre.v1.CommitEvidence commit = 106;
    // Evidence containing SQL queries and data analysis results with query IDs.
    synq.agent.sre.v1.DataQueryEvidenceV2 data_query_v2 = 107;
    // Evidence containing general analysis that doesn't fit into other specialized types.
    synq.agent.sre.v1.OtherEvidence other = 108;
  }
}

// HistoryEvidence represents historical context from similar past issues.
// This helps in understanding if the current issue is recurring or has known patterns.
message HistoryEvidence {
  // List of issue IDs that are similar to the currently triaged issue.
  // These historical issues can provide insights into resolution patterns.
  repeated string issue_ids = 1 [(buf.validate.field) = {
    repeated: {
      min_items: 1
      items: {
        required: true
        string: {uuid: true}
      }
    }
  }];
}

// RootCauseEvidence identifies the likely root cause of the issue being investigated.
// This helps in understanding the fundamental reason behind the problem.
message RootCauseEvidence {
  // ID of the issue that is believed to be the root cause of the current issue.
  string issue_id = 1 [(buf.validate.field) = {
    required: true
    string: {uuid: true}
  }];
}

// ChangeEvidence documents recent changes that may have contributed to the issue.
// This helps in understanding if the issue is related to recent modifications.
message ChangeEvidence {
  // List of entities (e.g., services, configurations) that have recently changed
  // and may be related to the current issue.
  repeated synq.entities.v1.Identifier entities = 1;

  // Read-only list of paths matching entities. This is a unique path that can be used to access the entity in the Synq's UI.
  repeated string entities_synq_paths = 4 [(buf.validate.field) = {
    repeated: {max_items: 0}
  }];

  // Detailed description of the changes that were detected and their potential
  // impact on the current issue.
  string change_description = 2;
  // When available identifiers of specific change IDs
  repeated string change_ids = 3;
}

// RelatedIssueEvidence identifies other issues that may be connected to the current investigation.
// This helps in understanding broader context and potential dependencies.
message RelatedIssueEvidence {
  // List of issue IDs that are related to the current investigation.
  // These issues may be symptoms of the same underlying problem or have dependencies.
  repeated string issue_ids = 1 [(buf.validate.field) = {
    repeated: {
      min_items: 1
      items: {
        required: true
        string: {uuid: true}
      }
    }
  }];
}

// AnalysisEvidence contains detailed analysis of the issue based on collected data.
// This should only be used as a last resort when no other more specialized evidence types
// (history, root cause, related issues, or changes) could be collected.
// It provides a comprehensive understanding of the problem and its implications.
message AnalysisEvidence {
  // Detailed analysis of the issue, including observations, patterns, and potential implications.
  // This should provide clear reasoning for the conclusions drawn.
  string analysis = 1 [(buf.validate.field) = {required: true}];

  // SQL queries which were executed to investigate the issue and collect the evidence.
  repeated string sql_queries = 2;
}

// CommitEvidence documents code changes that may have contributed to the issue.
// This helps in understanding if the issue is related to recent code modifications.
message CommitEvidence {
  // ID of the change that introduced the code modifications.
  string change_id = 1 [(buf.validate.field) = {required: true}];

  // List of relevant code changes in the commit.
  repeated CodeChange relevant_code_changes = 2 [(buf.validate.field) = {
    repeated: {
      min_items: 1
      items: {
        required: true
      }
    }
  }];
}

// CodeChange represents a specific change in a file within a commit.
message CodeChange {
  // Path to the file that was changed.
  string file_path = 1 [(buf.validate.field) = {required: true}];

  // Starting line number of the change (inclusive).
  int32 start_line = 2;

  // Ending line number of the change (inclusive).
  int32 end_line = 3;

  // Description of what was changed in this section.
  string change_description = 4;
}

// DataQueryEvidenceV2 contains SQL queries and their analysis results with query IDs.
// This helps in understanding the issue through data analysis with query tracking.
message DataQueryEvidenceV2 {
  // List of data query evidence items, each containing a query ID and its analysis.
  repeated DataQueryEvidenceItem items = 1 [(buf.validate.field) = {
    repeated: {
      min_items: 1
      items: {
        required: true
      }
    }
  }];
}

// DataQueryEvidenceItem represents a single SQL query and its analysis.
message DataQueryEvidenceItem {
  // Unique identifier for the query. This ID can be used to retrieve the actual SQL query
  // from the session store.
  string query_id = 1 [(buf.validate.field) = {required: true}];

  // Analysis specific to this query's results and their implications.
  // This is the analysis of the results from executing the query identified by query_id.
  string data_analysis = 2 [(buf.validate.field) = {required: true}];
}

// OtherEvidence contains general analysis that doesn't fit into other specialized evidence types.
// This should be used when the analysis doesn't involve SQL queries, code changes, or other
// specialized evidence types.
message OtherEvidence {
  // Detailed analysis of the issue, including observations, patterns, and potential implications.
  // This should provide clear reasoning for the conclusions drawn.
  string analysis = 1 [(buf.validate.field) = {required: true}];
}
