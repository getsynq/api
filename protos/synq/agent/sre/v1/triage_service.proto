syntax = "proto3";

package synq.agent.sre.v1;

import "buf/validate/validate.proto";
import "synq/agent/sre/v1/conclusion.proto";
import "synq/agent/sre/v1/evidence.proto";
import "synq/agent/sre/v1/triage_state.proto";
import "google/api/annotations.proto";
import "synq/v1/scope_authorization.proto";

option go_package = "github.com/getsynq/api/agent/sre/v1";

// Service for managing issue triage operations, allowing LLM agents to conclude investigations
// and record evidence during the triage process.
service TriageService {
  // Concludes the triage investigation for one or more issues by providing a structured conclusion
  // and supporting evidence. This method is used by the LLM agent to finalize its investigation.
  rpc Conclude(ConcludeRequest) returns (ConcludeResponse) {
    option idempotency_level = IDEMPOTENT;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_SRE_AGENT]
    };
    option (google.api.http) = {
      post: "/api/triage/v1/{session_id}/conclusion"
      body: "*"
    };
  }

  // Records evidence collected during the triage investigation. This method allows the LLM agent
  // to incrementally add evidence as it discovers information during the investigation process.
  rpc RecordEvidence(RecordEvidenceRequest) returns (RecordEvidenceResponse) {
    option idempotency_level = IDEMPOTENT;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_SRE_AGENT]
    };
    option (google.api.http) = {
      post: "/api/triage/v1/{session_id}/evidence"
      body: "*"
    };
  }

  // Retrieves the latest triage state for one or more issues. This method is used by the LLM agent
  // to retrieve the current state of the issues it is working on.
  rpc BatchLatestConclusions(BatchLatestConclusionsRequest) returns (BatchLatestConclusionsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_SRE_AGENT]
    };
    option (google.api.http) = {
      get: "/api/triage/v1/conclusions"
    };
  }

  // Retrieves the triage state for one or more issues. This method is used by the LLM agent
  // to retrieve the current state of the issues it is working on.
  rpc BatchTriageState(BatchTriageStateRequest) returns (BatchTriageStateResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_SRE_AGENT]
    };
    option (google.api.http) = {
      get: "/api/triage/v1/states"
    };
  }

  // Retrieves the triage state for one or more issues. This method is used by the LLM agent
  // to retrieve the current state of the issues it is working on.
  rpc ListTriageState(ListTriageStateRequest) returns (ListTriageStateResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_SRE_AGENT]
    };
    option (google.api.http) = {
      get: "/api/triage/v1/statuses"
    };
  }

  // Marks an issue as in progress.  This method is used by the LLM agent to indicate that it has started working on an issue.
  rpc MarkAsInProgress(MarkAsInProgressRequest) returns (MarkAsInProgressResponse) {
    option idempotency_level = IDEMPOTENT;
    option (synq.v1.scope_authorization) = {
      scopes: [SCOPE_SRE_AGENT]
    };
    option (google.api.http) = {
      patch: "/api/triage/v1/in-progress"
      body: "*"
    };
  }
}

// Request to conclude the triage investigation for one or more issues.
message ConcludeRequest {
  // Unique identifier of the triaging session, used to group related operations.
  string session_id = 1 [(buf.validate.field) = {required: true}];

  // IssueConclusion represents the final determination made by the LLM agent about an issue.
  // Each conclusion type must be supported by appropriate evidence collected during investigation.
  synq.agent.sre.v1.IssueConclusion conclusion = 6 [(buf.validate.field) = {required: true}];
  // Collection of evidence items supporting the conclusion. Evidences previously recorded should not be added here.
  repeated synq.agent.sre.v1.EvidenceItem evidence = 7 [(buf.validate.field) = {
    repeated: {
      items: {required: true}
    }
  }];
}

// Response for the Conclude operation. Empty as the operation is fire-and-forget.
message ConcludeResponse {}

// Request to record evidence collected during the triage investigation.
message RecordEvidenceRequest {
  // Unique identifier of the triaging session, used to group related operations.
  string session_id = 1 [(buf.validate.field) = {required: true}];

  // Collection of structured evidence items collected during the investigation.
  // Must contain at least one evidence item.
  repeated synq.agent.sre.v1.EvidenceItem evidence = 7 [(buf.validate.field) = {
    repeated: {
      min_items: 1
      items: {required: true}
    }
  }];
}

// Response for the RecordEvidence operation. Empty as the operation is fire-and-forget.
message RecordEvidenceResponse {}

message BatchLatestConclusionsRequest {
  // List of issue IDs for which latest conclusion should be returned.
  repeated string issue_ids = 1;
}

message BatchLatestConclusionsResponse {
  repeated IssueConclusionWithEvidence conclusions = 1;
}

message BatchTriageStateRequest {
  // List of issue IDs for which triage status should be returned.
  repeated string issue_ids = 1 [(buf.validate.field) = {
    repeated: {
      items: {required: true}
    }
  }];
}

message BatchTriageStateResponse {
  map<string, IssueTriageState> states = 1;
}

message ListTriageStateRequest {
  repeated synq.agent.sre.v1.IssueTriageStatus statuses = 1 [(buf.validate.field) = {
    repeated: {
      items: {required: true}
      min_items: 1
    }
  }];
}

message ListTriageStateResponse {
  repeated IssueTriageState states = 1;
}

message MarkAsInProgressRequest {
  // List of issue IDs for which work has started.
  repeated string issue_ids = 1;
}

message MarkAsInProgressResponse {
  repeated string marked_issue_ids = 1;
}
