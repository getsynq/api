syntax = "proto3";

package synq.monitors.custom_monitors.v1;

import "buf/validate/validate.proto";
import "google/protobuf/wrappers.proto";
import "synq/entities/v1/identifier.proto";

option go_package = "github.com/getsynq/api/monitors/custom_monitors/v1";

message Segmentation {
  // The expression to segment on (eg. "country", "meta['country']")
  // You can optionally specify values to include or exclude from segmentation.
  // If neither are provided, all values are included by default.
  string expression = 1 [(buf.validate.field).required = true];
  option (buf.validate.message).oneof = {
    fields: [
      "include_values",
      "exclude_values"
    ]
    required: false
  };
  optional ValueList include_values = 2; // List of expression values to include for segmentation (eg. "UK", "France")
  optional ValueList exclude_values = 3; // List of expression values to exclude for segmentation (eg. "NA", "")
}

message ValueList {
  repeated string values = 1;
}

message TimePartitioning {
  // The expression to partition on (eg. "created_at", "meta['created_at']")
  string expression = 1 [(buf.validate.field).required = true];
}

message ScheduleDaily {
  // Minutes since midnight (0-1439)
  int32 minutes_since_midnight = 1 [(buf.validate.field) = {
    int32: {
      gte: 0
      lte: 1439
    }
  }];
  // Delay monitoring by given number of days.
  optional int32 delay_num_days = 2 [(buf.validate.field) = {
    int32: {gte: 0}
    required: false
  }];
  // if true, the minutes_since_midnight will be related to delay scheduling/execution instead of time shifting time partitions
  bool only_schedule_delay = 3;
}

message ScheduleHourly {
  // Minute of hour (0-59)
  int32 minute_of_hour = 1 [(buf.validate.field) = {
    int32: {
      gte: 0
      lte: 59
    }
  }];
  // Delay monitoring by given number of hours.
  optional int32 delay_num_hours = 2 [(buf.validate.field) = {
    int32: {gte: 0}
    required: false
  }];
  // if true, the minute_of_hour will be related to delay scheduling/execution instead of time shifting time partitions
  bool only_schedule_delay = 3;
}

message MonitorFreshness {
  // The expression to filter on (eg. "created_at", "meta['created_at']")
  string expression = 1 [(buf.validate.field).required = true];
}

message MonitorCustomNumeric {
  string metric_aggregation = 1;
}

message MonitorVolume {}

message MonitorFieldStats {
  repeated string fields = 1 [(buf.validate.field).repeated.min_items = 1];
}

enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_WARNING = 1;
  SEVERITY_ERROR = 2;
}

enum Sensitivity {
  SENSITIVITY_UNSPECIFIED = 0;
  SENSITIVITY_PRECISE = 1;
  SENSITIVITY_BALANCED = 2;
  SENSITIVITY_RELAXED = 3;
}

message ModeAnomalyEngine {
  Sensitivity sensitivity = 1;
}
message ModeFixedThresholds {
  google.protobuf.DoubleValue min = 1;
  google.protobuf.DoubleValue max = 2;
}

message MonitorDefinition {
  string id = 1 [(buf.validate.field) = {
    required: true
    string: {uuid: true}
  }];
  synq.entities.v1.Identifier monitored_id = 2 [(buf.validate.field).required = true];
  TimePartitioning time_partitioning = 3 [(buf.validate.field).required = true];
  // Segmentation is not supported for field stats monitors
  optional Segmentation segmentation = 4;
  optional string filter = 5;
  Severity severity = 6;
  string name = 7 [(buf.validate.field).required = true];
  string config_id = 8;
  enum Source {
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    SOURCE_APP = 0;
    SOURCE_API = 1;
  }
  Source source = 9; // Source of the monitor.
  string timezone = 10;

  oneof monitor {
    MonitorFreshness freshness = 20;
    MonitorVolume volume = 21;
    MonitorCustomNumeric custom_numeric = 22;
    MonitorFieldStats field_stats = 23;
  }

  oneof mode {
    ModeAnomalyEngine anomaly_engine = 30;
    ModeFixedThresholds fixed_thresholds = 31;
  }

  oneof schedule {
    ScheduleDaily daily = 40;
    ScheduleHourly hourly = 41;
  }
}
