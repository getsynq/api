syntax = "proto3";

package synq.datachecks.sqltests.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "synq/datachecks/testsuggestions/v1/test_suggestion.proto";
import "synq/entities/v1/annotation.proto";
import "synq/entities/v1/identifier.proto";
import "synq/platforms/v1/data_platforms.proto";

option go_package = "github.com/getsynq/api/datachecks/sqltests/v1";

// The SqlTest is a SQL test that is executed on a synq entity.
message SqlTest {
  option (buf.validate.message).cel = {
    id: "sql_test_requires_expression_or_suggestion"
    expression: "has(this.sql_expression) != has(this.template)"
    message: "exactly one of sql_expression or template must be provided, but not both"
  };
  option (buf.validate.message).cel = {
    id: "sql_test_requires_platform_or_template"
    expression: "has(this.platform) || has(this.template.identifier)"
    message: "at least one of platform or template identifier must be provided"
  };

  // Identifier for the data platform which the SqlTest would be executed on.
  platforms.v1.DataPlatformIdentifier platform = 1;

  // Unique resource identifier for the SqlTest. This is externally maintained and can
  // be used to fetch/update/delete this test.
  string id = 2 [(buf.validate.field).required = true];

  // Human friendly name.
  string name = 3 [(buf.validate.field).required = true];

  // Description of purpose and motivation.
  string description = 9;

  Severity severity = 10;

  // A valid SQL expression which is the test.
  string sql_expression = 4;

  // [Recurrence rule](https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html) for the execution schedule of the SqlTest.
  string recurrence_rule = 5;

  // Annotations for the given SqlTest.These help filter the SqlTests for later
  // operations like listing by API, selection in UI, analytics, etc.
  repeated entities.v1.Annotation annotations = 6;

  // Boolean flag to to toggle saving of failure runs.
  bool save_failures = 7;

  // Template for the SqlTest.
  // required when sql_expression is not provided
  Template template = 8;
}

enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_WARNING = 1;
  SEVERITY_ERROR = 2;
  SEVERITY_INFO = 3;
}

message SqlTestAudit {
  string execution_id = 1;
  int32 rows_count = 2;
  string result = 3;
  google.protobuf.Timestamp created_at = 4;
}

message Template {
  // Read-only path of matched entity. This is a unique path that can be used to access the entity in the Synq's UI.
  synq.entities.v1.Identifier identifier = 1 [(buf.validate.field).required = true];
  oneof test {
    // Checks if specified columns contain no NULL values (e.g., user_id should never be null)
    testsuggestions.v1.NotNullTest not_null_test = 11;
    // Checks if specified columns contain empty values (e.g., description field can be empty)
    testsuggestions.v1.EmptyTest empty_test = 12;
    // Validates that column values are within an allowed set (e.g., status in ['active', 'inactive', 'pending'])
    testsuggestions.v1.AcceptedValuesTest accepted_values_test = 13;
    // Validates that column values are not in a forbidden set (e.g., country not in ['UNKNOWN', 'TEST'])
    testsuggestions.v1.RejectedValuesTest rejected_values_test = 14;
    // Ensures specified columns form a unique key combination (e.g., order_id is unique)
    testsuggestions.v1.UniqueTest unique_test = 15;
    // Checks if data is up-to-date based on a time column (e.g., latest event_timestamp within 24h)
    testsuggestions.v1.FreshnessTest freshness_test = 16;
    // Validates numeric values are within specified range (e.g., price between 0 and 1000)
    testsuggestions.v1.MinMaxTest min_max_test = 17;
    // Compares time-based columns for logical order (e.g., start_date before end_date)
    testsuggestions.v1.RelativeTimeTest relative_time_test = 18;
    // Custom SQL-based business logic validation (e.g., total_amount = subtotal + tax)
    testsuggestions.v1.BusinessRuleTest business_rule_test = 19;
    // Validates numeric values are greater than or equal to a minimum value (e.g., price &gt;= 0)
    testsuggestions.v1.MinValueTest min_value_test = 20;
    // Validates numeric values are less than or equal to a maximum value (e.g., price &lt;= 1000)
    testsuggestions.v1.MaxValueTest max_value_test = 21;
  }
}
