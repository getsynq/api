# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: SYNQ
    description: REST API interface for SYNQ
    version: v1
servers:
    - url: https://developer.synq.io
paths:
    /api/changes/v1:
        get:
            tags:
                - ChangesService
            description: |-
                List retrieves the history of changes for a specific entity identified by its path.
                 Changes are returned in chronological order (newest first) and include details about the type of change,
                 when it occurred, and who made it.
            operationId: ChangesService_List
            parameters:
                - name: id.dbtCoreNode.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the dbt Core project
                  schema:
                    type: string
                - name: id.dbtCoreNode.nodeId
                  in: query
                  description: Dbt node_id that identifies one of dbt DAG nodes (model, test, etc)
                  schema:
                    type: string
                - name: id.dbtCloudNode.projectId
                  in: query
                  description: Your dbt Cloud project id
                  schema:
                    type: string
                - name: id.dbtCloudNode.accountId
                  in: query
                  description: Your dbt Cloud account id
                  schema:
                    type: string
                - name: id.dbtCloudNode.nodeId
                  in: query
                  description: Dbt node_id that identifies one of dbt DAG nodes (model, test, etc)
                  schema:
                    type: string
                - name: id.bigqueryTable.project
                  in: query
                  description: BigQuery project
                  schema:
                    type: string
                - name: id.bigqueryTable.dataset
                  in: query
                  description: BigQuery dataset id
                  schema:
                    type: string
                - name: id.bigqueryTable.table
                  in: query
                  description: BigQuery table name
                  schema:
                    type: string
                - name: id.snowflakeTable.account
                  in: query
                  description: Snowflake account
                  schema:
                    type: string
                - name: id.snowflakeTable.database
                  in: query
                  description: Snowflake database
                  schema:
                    type: string
                - name: id.snowflakeTable.schema
                  in: query
                  description: Snowflake schema
                  schema:
                    type: string
                - name: id.snowflakeTable.table
                  in: query
                  description: Snowflake table
                  schema:
                    type: string
                - name: id.redshiftTable.cluster
                  in: query
                  description: Redshift cluster
                  schema:
                    type: string
                - name: id.redshiftTable.database
                  in: query
                  description: Redshift database
                  schema:
                    type: string
                - name: id.redshiftTable.schema
                  in: query
                  description: Redshift schema
                  schema:
                    type: string
                - name: id.redshiftTable.table
                  in: query
                  description: Redshift table
                  schema:
                    type: string
                - name: id.postgresTable.host
                  in: query
                  description: Postgres hostname without port
                  schema:
                    type: string
                - name: id.postgresTable.database
                  in: query
                  description: Postgres database
                  schema:
                    type: string
                - name: id.postgresTable.schema
                  in: query
                  description: Postgres schema
                  schema:
                    type: string
                - name: id.postgresTable.table
                  in: query
                  description: Postgres table
                  schema:
                    type: string
                - name: id.mysqlTable.host
                  in: query
                  description: Mysql hostname without port
                  schema:
                    type: string
                - name: id.mysqlTable.schema
                  in: query
                  description: Mysql database
                  schema:
                    type: string
                - name: id.mysqlTable.table
                  in: query
                  description: Mysql table
                  schema:
                    type: string
                - name: id.clickhouseTable.host
                  in: query
                  description: Clickhouse hostname without port
                  schema:
                    type: string
                - name: id.clickhouseTable.schema
                  in: query
                  description: Clickhouse database
                  schema:
                    type: string
                - name: id.clickhouseTable.table
                  in: query
                  description: Clickhouse table
                  schema:
                    type: string
                - name: id.airflowDag.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the Airflow instance
                  schema:
                    type: string
                - name: id.airflowDag.dagId
                  in: query
                  description: Airflow dag_id that identifies the DAG
                  schema:
                    type: string
                - name: id.airflowTask.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the Airflow instance
                  schema:
                    type: string
                - name: id.airflowTask.dagId
                  in: query
                  description: Airflow dag_id that identifies the DAG
                  schema:
                    type: string
                - name: id.airflowTask.taskId
                  in: query
                  description: Airflow task_id that identifies the task within the DAG
                  schema:
                    type: string
                - name: id.custom.id
                  in: query
                  description: |-
                    Id that identifies the custom entity
                     The Id should be unique within the custom entity Identifier.
                  schema:
                    type: string
                - name: id.dataproduct.id
                  in: query
                  description: Dataproduct id that identifies the Dataproduct
                  schema:
                    type: string
                - name: id.synqPath.path
                  in: query
                  description: SYNQ path that identifies the SYNQ entity, needs to be one of supported paths
                  schema:
                    type: string
                - name: id.databricksTable.workspace
                  in: query
                  description: URL of Databricks workspace
                  schema:
                    type: string
                - name: id.databricksTable.catalog
                  in: query
                  description: Databricks catalog
                  schema:
                    type: string
                - name: id.databricksTable.schema
                  in: query
                  description: Databricks schema
                  schema:
                    type: string
                - name: id.databricksTable.table
                  in: query
                  description: Databricks table or view
                  schema:
                    type: string
                - name: id.trinoTable.host
                  in: query
                  description: Hostname of the Trino instance
                  schema:
                    type: string
                - name: id.trinoTable.catalog
                  in: query
                  description: Trino catalog
                  schema:
                    type: string
                - name: id.trinoTable.schema
                  in: query
                  description: Trino schema
                  schema:
                    type: string
                - name: id.trinoTable.table
                  in: query
                  description: Trino table or view
                  schema:
                    type: string
                - name: id.sqlMeshModel.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the dbt Core project
                  schema:
                    type: string
                - name: id.sqlMeshModel.fqn
                  in: query
                  description: SQLMesh model fully qualified name
                  schema:
                    type: string
                - name: id.sqlMeshAudit.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the dbt Core project
                  schema:
                    type: string
                - name: id.sqlMeshAudit.fqn
                  in: query
                  description: SQLMesh model fully qualified name
                  schema:
                    type: string
                - name: id.sqlMeshAudit.auditId
                  in: query
                  description: Identifier of the audit
                  schema:
                    type: string
                - name: id.monitor.monitoredId.dbtCoreNode.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the dbt Core project
                  schema:
                    type: string
                - name: id.monitor.monitoredId.dbtCoreNode.nodeId
                  in: query
                  description: Dbt node_id that identifies one of dbt DAG nodes (model, test, etc)
                  schema:
                    type: string
                - name: id.monitor.monitoredId.dbtCloudNode.projectId
                  in: query
                  description: Your dbt Cloud project id
                  schema:
                    type: string
                - name: id.monitor.monitoredId.dbtCloudNode.accountId
                  in: query
                  description: Your dbt Cloud account id
                  schema:
                    type: string
                - name: id.monitor.monitoredId.dbtCloudNode.nodeId
                  in: query
                  description: Dbt node_id that identifies one of dbt DAG nodes (model, test, etc)
                  schema:
                    type: string
                - name: id.monitor.monitoredId.bigqueryTable.project
                  in: query
                  description: BigQuery project
                  schema:
                    type: string
                - name: id.monitor.monitoredId.bigqueryTable.dataset
                  in: query
                  description: BigQuery dataset id
                  schema:
                    type: string
                - name: id.monitor.monitoredId.bigqueryTable.table
                  in: query
                  description: BigQuery table name
                  schema:
                    type: string
                - name: id.monitor.monitoredId.snowflakeTable.account
                  in: query
                  description: Snowflake account
                  schema:
                    type: string
                - name: id.monitor.monitoredId.snowflakeTable.database
                  in: query
                  description: Snowflake database
                  schema:
                    type: string
                - name: id.monitor.monitoredId.snowflakeTable.schema
                  in: query
                  description: Snowflake schema
                  schema:
                    type: string
                - name: id.monitor.monitoredId.snowflakeTable.table
                  in: query
                  description: Snowflake table
                  schema:
                    type: string
                - name: id.monitor.monitoredId.redshiftTable.cluster
                  in: query
                  description: Redshift cluster
                  schema:
                    type: string
                - name: id.monitor.monitoredId.redshiftTable.database
                  in: query
                  description: Redshift database
                  schema:
                    type: string
                - name: id.monitor.monitoredId.redshiftTable.schema
                  in: query
                  description: Redshift schema
                  schema:
                    type: string
                - name: id.monitor.monitoredId.redshiftTable.table
                  in: query
                  description: Redshift table
                  schema:
                    type: string
                - name: id.monitor.monitoredId.postgresTable.host
                  in: query
                  description: Postgres hostname without port
                  schema:
                    type: string
                - name: id.monitor.monitoredId.postgresTable.database
                  in: query
                  description: Postgres database
                  schema:
                    type: string
                - name: id.monitor.monitoredId.postgresTable.schema
                  in: query
                  description: Postgres schema
                  schema:
                    type: string
                - name: id.monitor.monitoredId.postgresTable.table
                  in: query
                  description: Postgres table
                  schema:
                    type: string
                - name: id.monitor.monitoredId.mysqlTable.host
                  in: query
                  description: Mysql hostname without port
                  schema:
                    type: string
                - name: id.monitor.monitoredId.mysqlTable.schema
                  in: query
                  description: Mysql database
                  schema:
                    type: string
                - name: id.monitor.monitoredId.mysqlTable.table
                  in: query
                  description: Mysql table
                  schema:
                    type: string
                - name: id.monitor.monitoredId.clickhouseTable.host
                  in: query
                  description: Clickhouse hostname without port
                  schema:
                    type: string
                - name: id.monitor.monitoredId.clickhouseTable.schema
                  in: query
                  description: Clickhouse database
                  schema:
                    type: string
                - name: id.monitor.monitoredId.clickhouseTable.table
                  in: query
                  description: Clickhouse table
                  schema:
                    type: string
                - name: id.monitor.monitoredId.airflowDag.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the Airflow instance
                  schema:
                    type: string
                - name: id.monitor.monitoredId.airflowDag.dagId
                  in: query
                  description: Airflow dag_id that identifies the DAG
                  schema:
                    type: string
                - name: id.monitor.monitoredId.airflowTask.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the Airflow instance
                  schema:
                    type: string
                - name: id.monitor.monitoredId.airflowTask.dagId
                  in: query
                  description: Airflow dag_id that identifies the DAG
                  schema:
                    type: string
                - name: id.monitor.monitoredId.airflowTask.taskId
                  in: query
                  description: Airflow task_id that identifies the task within the DAG
                  schema:
                    type: string
                - name: id.monitor.monitoredId.custom.id
                  in: query
                  description: |-
                    Id that identifies the custom entity
                     The Id should be unique within the custom entity Identifier.
                  schema:
                    type: string
                - name: id.monitor.monitoredId.dataproduct.id
                  in: query
                  description: Dataproduct id that identifies the Dataproduct
                  schema:
                    type: string
                - name: id.monitor.monitoredId.synqPath.path
                  in: query
                  description: SYNQ path that identifies the SYNQ entity, needs to be one of supported paths
                  schema:
                    type: string
                - name: id.monitor.monitoredId.databricksTable.workspace
                  in: query
                  description: URL of Databricks workspace
                  schema:
                    type: string
                - name: id.monitor.monitoredId.databricksTable.catalog
                  in: query
                  description: Databricks catalog
                  schema:
                    type: string
                - name: id.monitor.monitoredId.databricksTable.schema
                  in: query
                  description: Databricks schema
                  schema:
                    type: string
                - name: id.monitor.monitoredId.databricksTable.table
                  in: query
                  description: Databricks table or view
                  schema:
                    type: string
                - name: id.monitor.monitoredId.trinoTable.host
                  in: query
                  description: Hostname of the Trino instance
                  schema:
                    type: string
                - name: id.monitor.monitoredId.trinoTable.catalog
                  in: query
                  description: Trino catalog
                  schema:
                    type: string
                - name: id.monitor.monitoredId.trinoTable.schema
                  in: query
                  description: Trino schema
                  schema:
                    type: string
                - name: id.monitor.monitoredId.trinoTable.table
                  in: query
                  description: Trino table or view
                  schema:
                    type: string
                - name: id.monitor.monitoredId.sqlMeshModel.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the dbt Core project
                  schema:
                    type: string
                - name: id.monitor.monitoredId.sqlMeshModel.fqn
                  in: query
                  description: SQLMesh model fully qualified name
                  schema:
                    type: string
                - name: id.monitor.monitoredId.sqlMeshAudit.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the dbt Core project
                  schema:
                    type: string
                - name: id.monitor.monitoredId.sqlMeshAudit.fqn
                  in: query
                  description: SQLMesh model fully qualified name
                  schema:
                    type: string
                - name: id.monitor.monitoredId.sqlMeshAudit.auditId
                  in: query
                  description: Identifier of the audit
                  schema:
                    type: string
                - name: id.monitor.monitoredId.monitor.monitorId
                  in: query
                  description: Identifier of the monitor
                  schema:
                    type: string
                - name: id.monitor.monitoredId.monitor.segment
                  in: query
                  description: Optional monitor segmentation identifier
                  schema:
                    type: string
                - name: id.monitor.monitoredId.monitor.integrationId
                  in: query
                  description: SYNQ integration_id of the monitored identifier
                  schema:
                    type: string
                - name: id.monitor.monitorId
                  in: query
                  description: Identifier of the monitor
                  schema:
                    type: string
                - name: id.monitor.segment
                  in: query
                  description: Optional monitor segmentation identifier
                  schema:
                    type: string
                - name: id.monitor.integrationId
                  in: query
                  description: SYNQ integration_id of the monitored identifier
                  schema:
                    type: string
                - name: changeBefore
                  in: query
                  description: Return changes older than or on `before`. Defaults to `now()`.
                  schema:
                    type: string
                    format: date-time
                - name: changeAfter
                  in: query
                  description: Return changes newer than until. Defaults to before - 7days,
                  schema:
                    type: string
                    format: date-time
                - name: limitToChangeTypes
                  in: query
                  description: Return only changes of specific types.
                  schema:
                    type: array
                    items:
                        type: integer
                        format: enum
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/changes/v1/batch:
        get:
            tags:
                - ChangesService
            description: |-
                BatchChange retrieves multiple entity changes by their IDs in a single request.
                 This is an optimized endpoint for fetching specific changes when you already know their IDs,
                 rather than listing changes for an entity.
            operationId: ChangesService_BatchChange
            parameters:
                - name: changeIds
                  in: query
                  description: List of change IDs to retrieve. Each ID uniquely identifies a specific change in the system.
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchChangeResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/code/v1/{id}:
        get:
            tags:
                - CodeService
            description: |-
                ListCode retrieves all code artifacts associated with a specific entity.
                 This includes SQL queries, Python scripts, dbt models, and other code configurations
                 that define or are part of the entity's functionality.
            operationId: CodeService_ListCode
            parameters:
                - name: id
                  in: path
                  description: |-
                    Identifier of the entity to retrieve code for.
                     This can be any entity type that contains code artifacts.
                  required: true
                  schema:
                    $ref: '#/components/schemas/Identifier'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListCodeResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/coordinates/v1/database:
        get:
            tags:
                - DatabaseCoordinatesService
            description: Get multiple DatabaseCoordinates for identifiers.
            operationId: DatabaseCoordinatesService_BatchDatabaseCoordinates
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchDatabaseCoordinatesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/datachecks/sqltests/v1:
        get:
            tags:
                - SqlTestsService
            description: List SqlTests for given annotations.
            operationId: SqlTestsService_ListSqlTests
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListSqlTestsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/datachecks/sqltests/v1/audit:
        get:
            tags:
                - SqlTestsService
            description: Get SqlTest audit from a given execution ID in jwt token.
            operationId: SqlTestsService_GetSqlTestAudit
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetSqlTestAuditResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/datachecks/sqltests/v1/batch:
        get:
            tags:
                - SqlTestsService
            description: Get SqlTests by their IDs.
            operationId: SqlTestsService_BatchGetSqlTests
            parameters:
                - name: ids
                  in: query
                  description: IDs of the SqlTests to fetch.
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchGetSqlTestsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - SqlTestsService
            description: Upsert SqlTests based on a unique ID.
            operationId: SqlTestsService_BatchUpsertSqlTests
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchUpsertSqlTestsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchUpsertSqlTestsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - SqlTestsService
            description: Delete SqlTests by their IDs.
            operationId: SqlTestsService_BatchDeleteSqlTests
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchDeleteSqlTestsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchDeleteSqlTestsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/datachecks/testsuggestions/v1:
        get:
            tags:
                - TestSuggestionsService
            operationId: TestSuggestionsService_BatchGetTestSuggestionsForEntities
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchGetTestSuggestionsForEntitiesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - TestSuggestionsService
            operationId: TestSuggestionsService_BatchCreateTestSuggestions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchCreateTestSuggestionsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchCreateTestSuggestionsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/datachecks/testsuggestions/v1/accepted:
        patch:
            tags:
                - TestSuggestionsService
            operationId: TestSuggestionsService_BatchAcceptTestSuggestions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchAcceptTestSuggestionsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchAcceptTestSuggestionsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/datachecks/testsuggestions/v1/rejected:
        patch:
            tags:
                - TestSuggestionsService
            operationId: TestSuggestionsService_BatchRejectTestSuggestions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchRejectTestSuggestionsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchRejectTestSuggestionsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/datawarehouse/v1/connection/{connectionId}/upload/{uploadId}/object-information:
        post:
            tags:
                - DwhService
            operationId: DwhService_IngestObjectInformation
            parameters:
                - name: connectionId
                  in: path
                  required: true
                  schema:
                    type: string
                - name: uploadId
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IngestObjectInformationRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IngestObjectInformationResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/datawarehouse/v1/connection/{connectionId}/upload/{uploadId}/object-metrics:
        post:
            tags:
                - DwhService
            operationId: DwhService_IngestObjectMetrics
            parameters:
                - name: connectionId
                  in: path
                  required: true
                  schema:
                    type: string
                - name: uploadId
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IngestObjectMetricsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IngestObjectMetricsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/datawarehouse/v1/connection/{connectionId}/upload/{uploadId}/schemas:
        post:
            tags:
                - DwhService
            operationId: DwhService_IngestSchemas
            parameters:
                - name: connectionId
                  in: path
                  required: true
                  schema:
                    type: string
                - name: uploadId
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IngestSchemasRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IngestSchemasResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/datawarehouse/v1/connection/{connectionId}/upload/{uploadId}/sql-definitions:
        post:
            tags:
                - DwhService
            operationId: DwhService_IngestSqlDefinitions
            parameters:
                - name: connectionId
                  in: path
                  required: true
                  schema:
                    type: string
                - name: uploadId
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IngestSqlDefinitionsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IngestSqlDefinitionsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/datawarehouse/v1/connection/{connectionId}/upload/{upload_id}/task-results:
        post:
            tags:
                - DwhService
            operationId: DwhService_IngestTaskResults
            parameters:
                - name: connectionId
                  in: path
                  required: true
                  schema:
                    type: string
                - name: upload_id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IngestTaskResultsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IngestTaskResultsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/entities/custom/v1:
        get:
            tags:
                - EntitiesService
            description: List all entities.
            operationId: EntitiesService_ListEntities
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListEntitiesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - EntitiesService
            description: Create or update an entity. If the entity does not exist, it will be created, otherwise it will be updated. Entities are identified and deduplicated by their Identifier in a scope of a given customer workspace.
            operationId: EntitiesService_UpsertEntity
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertEntityRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpsertEntityResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/entities/custom/v1/{id}:
        delete:
            tags:
                - EntitiesService
            description: Delete an entity by its identifier. If the entity does not exist, it will be a no-op.
            operationId: EntitiesService_DeleteEntity
            parameters:
                - name: id
                  in: path
                  description: Identifier of the entity to delete.
                  required: true
                  schema:
                    $ref: '#/components/schemas/Identifier'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteEntityResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/entities/v1:
        get:
            tags:
                - EntitiesService
            description: Get multiple entities by their identifiers.
            operationId: EntitiesService_BatchGetEntities
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchGetEntitiesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/entities/v1/{id}:
        get:
            tags:
                - EntitiesService
            description: Get specific entity by its identifier.
            operationId: EntitiesService_GetEntity
            parameters:
                - name: id
                  in: path
                  description: Identifier of the entity to get.
                  required: true
                  schema:
                    $ref: '#/components/schemas/Identifier'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetEntityResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/executions/v1:
        post:
            tags:
                - EntityExecutionsService
            description: Execution affects status of the custom entity
            operationId: EntityExecutionsService_UpsertExecution
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertExecutionRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpsertExecutionResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/executions/v1/log-entry:
        post:
            tags:
                - EntityExecutionsService
            description: LogEntry is a log message for the custom entity
            operationId: EntityExecutionsService_UpsertLogEntry
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertLogEntryRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpsertLogEntryResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/extensions/atlan/integrations/v1:
        get:
            tags:
                - AtlanIntegrationService
            operationId: AtlanIntegrationService_Get
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - AtlanIntegrationService
            description: Upserts an integration and validates it by checking if the provided API URL and token are valid.
            operationId: AtlanIntegrationService_Upsert
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpsertResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - AtlanIntegrationService
            operationId: AtlanIntegrationService_Remove
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RemoveResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - AtlanIntegrationService
            description: Activate or deactivate the integration.
            operationId: AtlanIntegrationService_Activate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ActivateRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ActivateResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/extensions/atlan/provider/v1/connections:
        get:
            tags:
                - AtlanProviderService
            operationId: AtlanProviderService_GetAtlanConnections
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetAtlanConnectionsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/extensions/atlan/provider/v1/data-products:
        get:
            tags:
                - AtlanProviderService
            operationId: AtlanProviderService_GetAtlanDataProducts
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetAtlanDataProductsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/extensions/atlan/provider/v1/domains:
        get:
            tags:
                - AtlanProviderService
            operationId: AtlanProviderService_GetAtlanDomains
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetAtlanDomainsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/extensions/atlan/workflows/v1/connection-mappings:
        get:
            tags:
                - AtlanWorkflowService
            operationId: AtlanWorkflowService_GetConnectionMappings
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetConnectionMappingsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - AtlanWorkflowService
            operationId: AtlanWorkflowService_SetConnectionMappings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SetConnectionMappingsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SetConnectionMappingsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - AtlanWorkflowService
            operationId: AtlanWorkflowService_RemoveConnectionMappings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RemoveConnectionMappingsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RemoveConnectionMappingsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/extensions/atlan/workflows/v1/domain-mappings:
        get:
            tags:
                - AtlanWorkflowService
            operationId: AtlanWorkflowService_GetDomainMappings
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetDomainMappingsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/extensions/atlan/workflows/v1/product-mappings:
        get:
            tags:
                - AtlanWorkflowService
            operationId: AtlanWorkflowService_GetProductMappings
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetProductMappingsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/extensions/atlan/workflows/v1/runs:
        get:
            tags:
                - AtlanWorkflowService
            operationId: AtlanWorkflowService_FetchRuns
            parameters:
                - name: from
                  in: query
                  schema:
                    type: integer
                    format: int32
                - name: limit
                  in: query
                  schema:
                    type: integer
                    format: int32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/FetchRunsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/extensions/atlan/workflows/v1/synchronize:
        post:
            tags:
                - AtlanWorkflowService
            description: Run a synchronization job for the integration.
            operationId: AtlanWorkflowService_Synchronize
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SynchronizeResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/git/v1/change/{changeId}:
        get:
            tags:
                - CommitsService
            operationId: CommitsService_GetDiffByChangeId
            parameters:
                - name: changeId
                  in: path
                  required: true
                  schema:
                    type: string
                - name: limitToFiles
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetDiffByChangeIdResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/git/v1/commit/{commitSha}:
        get:
            tags:
                - CommitsService
            operationId: CommitsService_GetDiffByCommit
            parameters:
                - name: commitSha
                  in: path
                  required: true
                  schema:
                    type: string
                - name: limitToFiles
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetDiffByCommitResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/impact/v1:
        get:
            tags:
                - ImpactService
            operationId: ImpactService_GetImpact
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetImpactResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/incidents/v1:
        get:
            tags:
                - IncidentsService
            operationId: IncidentsService_ListIncidents
            parameters:
                - name: time.field
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: time.from
                  in: query
                  schema:
                    type: string
                    format: date-time
                - name: time.to
                  in: query
                  schema:
                    type: string
                    format: date-time
                - name: sort.sortBy
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: sort.order
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: pagination.cursor
                  in: query
                  schema:
                    type: string
                - name: pagination.pageSize
                  in: query
                  schema:
                    type: integer
                    format: int32
                - name: states
                  in: query
                  description: Filter by states
                  schema:
                    type: array
                    items:
                        type: integer
                        format: enum
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListIncidentsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - IncidentsService
            operationId: IncidentsService_CreateIncident
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateIncidentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateIncidentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/incidents/v1/batch:
        get:
            tags:
                - IncidentsService
            operationId: IncidentsService_BatchGetIncidents
            parameters:
                - name: incidentIds
                  in: query
                  description: IDs of the incidents to get
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchGetIncidentsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/incidents/v1/{incidentId}/cancel:
        patch:
            tags:
                - IncidentsService
            description: Cancel an incident
            operationId: IncidentsService_CancelIncident
            parameters:
                - name: incidentId
                  in: path
                  description: ID of the incident to cancel
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CancelIncidentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CancelIncidentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/incidents/v1/{incidentId}/close:
        patch:
            tags:
                - IncidentsService
            description: Close an incident
            operationId: IncidentsService_CloseIncident
            parameters:
                - name: incidentId
                  in: path
                  description: ID of the incident to close
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CloseIncidentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CloseIncidentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/incidents/v1/{incidentId}/issues:
        post:
            tags:
                - IncidentsService
            operationId: IncidentsService_AddIssuesToIncident
            parameters:
                - name: incidentId
                  in: path
                  description: ID of the incident to add issues to
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AddIssuesToIncidentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AddIssuesToIncidentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - IncidentsService
            operationId: IncidentsService_RemoveIssuesFromIncident
            parameters:
                - name: incidentId
                  in: path
                  description: ID of the incident to remove issues from
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RemoveIssuesFromIncidentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RemoveIssuesFromIncidentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/incidents/v1/{incidentId}/merge:
        post:
            tags:
                - IncidentsService
            operationId: IncidentsService_MergeIncidents
            parameters:
                - name: incidentId
                  in: path
                  description: ID of the primary incident to merge into
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MergeIncidentsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MergeIncidentsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/incidents/v1/{incidentId}/rename:
        patch:
            tags:
                - IncidentsService
            operationId: IncidentsService_RenameIncident
            parameters:
                - name: incidentId
                  in: path
                  description: ID of the incident to rename
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RenameIncidentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RenameIncidentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/incidents/v1/{incidentId}/split:
        post:
            tags:
                - IncidentsService
            operationId: IncidentsService_SplitIncident
            parameters:
                - name: incidentId
                  in: path
                  description: ID of the incident to split
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SplitIncidentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SplitIncidentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/issues/v1:
        get:
            tags:
                - IssuesService
            operationId: IssuesService_ListIssues
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ListIssuesRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListIssuesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/issues/v1/batch:
        get:
            tags:
                - IssuesService
            operationId: IssuesService_BatchGetIssues
            parameters:
                - name: issueIds
                  in: query
                  description: IDs of the issues to get.
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchGetIssuesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/issues/v1/{issueId}/comment:
        post:
            tags:
                - IssuesService
            description: Post a comment on an issue.
            operationId: IssuesService_PostComment
            parameters:
                - name: issueId
                  in: path
                  description: ID of the issue to post a comment on.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PostCommentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PostCommentResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/issues/v1/{issueId}/mark-expected:
        patch:
            tags:
                - IssuesService
            description: Mark issue as expected.
            operationId: IssuesService_MarkExpected
            parameters:
                - name: issueId
                  in: path
                  description: ID of the issue to mark as expected.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MarkExpectedRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MarkExpectedResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/issues/v1/{issueId}/mark-fixed:
        patch:
            tags:
                - IssuesService
            description: Mark issue as fixed.
            operationId: IssuesService_MarkFixed
            parameters:
                - name: issueId
                  in: path
                  description: ID of the issue to mark as fixed.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MarkFixedRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MarkFixedResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/issues/v1/{issueId}/mark-investigating:
        patch:
            tags:
                - IssuesService
            description: Mark issue as being investigated.
            operationId: IssuesService_MarkInvestigating
            parameters:
                - name: issueId
                  in: path
                  description: ID of the issue to mark as investigating.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MarkInvestigatingRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MarkInvestigatingResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/issues/v1/{issueId}/mark-no-action-needed:
        patch:
            tags:
                - IssuesService
            description: Mark issue as no action needed.
            operationId: IssuesService_MarkNoActionNeeded
            parameters:
                - name: issueId
                  in: path
                  description: ID of the issue to mark as no action needed.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MarkNoActionNeededRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MarkNoActionNeededResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/lineage/v1:
        get:
            tags:
                - LineageService
            operationId: LineageService_GetLineage
            parameters:
                - name: lineageDirection
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: startPoint.entityColumns.id.dbtCoreNode.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the dbt Core project
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.dbtCoreNode.nodeId
                  in: query
                  description: Dbt node_id that identifies one of dbt DAG nodes (model, test, etc)
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.dbtCloudNode.projectId
                  in: query
                  description: Your dbt Cloud project id
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.dbtCloudNode.accountId
                  in: query
                  description: Your dbt Cloud account id
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.dbtCloudNode.nodeId
                  in: query
                  description: Dbt node_id that identifies one of dbt DAG nodes (model, test, etc)
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.bigqueryTable.project
                  in: query
                  description: BigQuery project
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.bigqueryTable.dataset
                  in: query
                  description: BigQuery dataset id
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.bigqueryTable.table
                  in: query
                  description: BigQuery table name
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.snowflakeTable.account
                  in: query
                  description: Snowflake account
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.snowflakeTable.database
                  in: query
                  description: Snowflake database
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.snowflakeTable.schema
                  in: query
                  description: Snowflake schema
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.snowflakeTable.table
                  in: query
                  description: Snowflake table
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.redshiftTable.cluster
                  in: query
                  description: Redshift cluster
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.redshiftTable.database
                  in: query
                  description: Redshift database
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.redshiftTable.schema
                  in: query
                  description: Redshift schema
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.redshiftTable.table
                  in: query
                  description: Redshift table
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.postgresTable.host
                  in: query
                  description: Postgres hostname without port
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.postgresTable.database
                  in: query
                  description: Postgres database
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.postgresTable.schema
                  in: query
                  description: Postgres schema
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.postgresTable.table
                  in: query
                  description: Postgres table
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.mysqlTable.host
                  in: query
                  description: Mysql hostname without port
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.mysqlTable.schema
                  in: query
                  description: Mysql database
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.mysqlTable.table
                  in: query
                  description: Mysql table
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.clickhouseTable.host
                  in: query
                  description: Clickhouse hostname without port
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.clickhouseTable.schema
                  in: query
                  description: Clickhouse database
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.clickhouseTable.table
                  in: query
                  description: Clickhouse table
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.airflowDag.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the Airflow instance
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.airflowDag.dagId
                  in: query
                  description: Airflow dag_id that identifies the DAG
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.airflowTask.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the Airflow instance
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.airflowTask.dagId
                  in: query
                  description: Airflow dag_id that identifies the DAG
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.airflowTask.taskId
                  in: query
                  description: Airflow task_id that identifies the task within the DAG
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.custom.id
                  in: query
                  description: |-
                    Id that identifies the custom entity
                     The Id should be unique within the custom entity Identifier.
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.dataproduct.id
                  in: query
                  description: Dataproduct id that identifies the Dataproduct
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.synqPath.path
                  in: query
                  description: SYNQ path that identifies the SYNQ entity, needs to be one of supported paths
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.databricksTable.workspace
                  in: query
                  description: URL of Databricks workspace
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.databricksTable.catalog
                  in: query
                  description: Databricks catalog
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.databricksTable.schema
                  in: query
                  description: Databricks schema
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.databricksTable.table
                  in: query
                  description: Databricks table or view
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.trinoTable.host
                  in: query
                  description: Hostname of the Trino instance
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.trinoTable.catalog
                  in: query
                  description: Trino catalog
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.trinoTable.schema
                  in: query
                  description: Trino schema
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.trinoTable.table
                  in: query
                  description: Trino table or view
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.sqlMeshModel.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the dbt Core project
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.sqlMeshModel.fqn
                  in: query
                  description: SQLMesh model fully qualified name
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.sqlMeshAudit.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the dbt Core project
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.sqlMeshAudit.fqn
                  in: query
                  description: SQLMesh model fully qualified name
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.sqlMeshAudit.auditId
                  in: query
                  description: Identifier of the audit
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.dbtCoreNode.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the dbt Core project
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.dbtCoreNode.nodeId
                  in: query
                  description: Dbt node_id that identifies one of dbt DAG nodes (model, test, etc)
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.dbtCloudNode.projectId
                  in: query
                  description: Your dbt Cloud project id
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.dbtCloudNode.accountId
                  in: query
                  description: Your dbt Cloud account id
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.dbtCloudNode.nodeId
                  in: query
                  description: Dbt node_id that identifies one of dbt DAG nodes (model, test, etc)
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.bigqueryTable.project
                  in: query
                  description: BigQuery project
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.bigqueryTable.dataset
                  in: query
                  description: BigQuery dataset id
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.bigqueryTable.table
                  in: query
                  description: BigQuery table name
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.snowflakeTable.account
                  in: query
                  description: Snowflake account
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.snowflakeTable.database
                  in: query
                  description: Snowflake database
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.snowflakeTable.schema
                  in: query
                  description: Snowflake schema
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.snowflakeTable.table
                  in: query
                  description: Snowflake table
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.redshiftTable.cluster
                  in: query
                  description: Redshift cluster
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.redshiftTable.database
                  in: query
                  description: Redshift database
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.redshiftTable.schema
                  in: query
                  description: Redshift schema
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.redshiftTable.table
                  in: query
                  description: Redshift table
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.postgresTable.host
                  in: query
                  description: Postgres hostname without port
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.postgresTable.database
                  in: query
                  description: Postgres database
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.postgresTable.schema
                  in: query
                  description: Postgres schema
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.postgresTable.table
                  in: query
                  description: Postgres table
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.mysqlTable.host
                  in: query
                  description: Mysql hostname without port
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.mysqlTable.schema
                  in: query
                  description: Mysql database
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.mysqlTable.table
                  in: query
                  description: Mysql table
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.clickhouseTable.host
                  in: query
                  description: Clickhouse hostname without port
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.clickhouseTable.schema
                  in: query
                  description: Clickhouse database
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.clickhouseTable.table
                  in: query
                  description: Clickhouse table
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.airflowDag.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the Airflow instance
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.airflowDag.dagId
                  in: query
                  description: Airflow dag_id that identifies the DAG
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.airflowTask.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the Airflow instance
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.airflowTask.dagId
                  in: query
                  description: Airflow dag_id that identifies the DAG
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.airflowTask.taskId
                  in: query
                  description: Airflow task_id that identifies the task within the DAG
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.custom.id
                  in: query
                  description: |-
                    Id that identifies the custom entity
                     The Id should be unique within the custom entity Identifier.
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.dataproduct.id
                  in: query
                  description: Dataproduct id that identifies the Dataproduct
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.synqPath.path
                  in: query
                  description: SYNQ path that identifies the SYNQ entity, needs to be one of supported paths
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.databricksTable.workspace
                  in: query
                  description: URL of Databricks workspace
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.databricksTable.catalog
                  in: query
                  description: Databricks catalog
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.databricksTable.schema
                  in: query
                  description: Databricks schema
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.databricksTable.table
                  in: query
                  description: Databricks table or view
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.trinoTable.host
                  in: query
                  description: Hostname of the Trino instance
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.trinoTable.catalog
                  in: query
                  description: Trino catalog
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.trinoTable.schema
                  in: query
                  description: Trino schema
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.trinoTable.table
                  in: query
                  description: Trino table or view
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.sqlMeshModel.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the dbt Core project
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.sqlMeshModel.fqn
                  in: query
                  description: SQLMesh model fully qualified name
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.sqlMeshAudit.integrationId
                  in: query
                  description: SYNQ integration_id that identifies the dbt Core project
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.sqlMeshAudit.fqn
                  in: query
                  description: SQLMesh model fully qualified name
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.sqlMeshAudit.auditId
                  in: query
                  description: Identifier of the audit
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.monitor.monitorId
                  in: query
                  description: Identifier of the monitor
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.monitor.segment
                  in: query
                  description: Optional monitor segmentation identifier
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitoredId.monitor.integrationId
                  in: query
                  description: SYNQ integration_id of the monitored identifier
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.monitorId
                  in: query
                  description: Identifier of the monitor
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.segment
                  in: query
                  description: Optional monitor segmentation identifier
                  schema:
                    type: string
                - name: startPoint.entityColumns.id.monitor.integrationId
                  in: query
                  description: SYNQ integration_id of the monitored identifier
                  schema:
                    type: string
                - name: startPoint.entityColumns.columnNames
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: maxDepth
                  in: query
                  schema:
                    type: integer
                    format: int32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetLineageResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/monitors/automated/v1/deployment-rule:
        get:
            tags:
                - DeploymentRulesService
            operationId: DeploymentRulesService_GetDeployOverview
            parameters:
                - name: deploymentRule.id
                  in: query
                  schema:
                    type: string
                - name: deploymentRule.title
                  in: query
                  schema:
                    type: string
                - name: deploymentRule.queryConfig.query.operand
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: deploymentRule.queryConfig.severity
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: deploymentRule.queryConfig.sensitivity
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: deploymentRule.queryConfig.metricIds
                  in: query
                  schema:
                    type: array
                    items:
                        type: integer
                        format: enum
                - name: deploymentRule.queryConfig.keepDeletedMonitors
                  in: query
                  schema:
                    type: boolean
                - name: deploymentRule.exclusiveQueryConfig.query.operand
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: deploymentRule.staticConfig.path
                  in: query
                  schema:
                    type: string
                - name: deploymentRule.staticConfig.severity
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: deploymentRule.staticConfig.sensitivity
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: deploymentRule.staticConfig.metricIds
                  in: query
                  schema:
                    type: array
                    items:
                        type: integer
                        format: enum
                - name: deploymentRule.exclusiveStaticConfig.path
                  in: query
                  schema:
                    type: string
                - name: deploymentRule.productConfig.productId
                  in: query
                  schema:
                    type: string
                - name: deploymentRule.productConfig.severity
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: deploymentRule.productConfig.sensitivity
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: deploymentRule.productConfig.metricIds
                  in: query
                  schema:
                    type: array
                    items:
                        type: integer
                        format: enum
                - name: deploymentRule.productConfig.keepDeletedMonitors
                  in: query
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetDeployOverviewResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/monitors/automated/v1/deployment-rule/{id}:
        delete:
            tags:
                - DeploymentRulesService
            operationId: DeploymentRulesService_DeleteDeploymentRule
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteDeploymentRuleResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/monitors/automated/v1/deployment-rule/{id}/deleted:
        get:
            tags:
                - DeploymentRulesService
            operationId: DeploymentRulesService_GetDeployDeleteOverview
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetDeployDeleteOverviewResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/monitors/automated/v1/deployment-rules:
        get:
            tags:
                - DeploymentRulesService
            operationId: DeploymentRulesService_ListDeploymentRules
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListDeploymentRulesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - DeploymentRulesService
            operationId: DeploymentRulesService_UpsertDeploymentRule
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpsertDeploymentRuleRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpsertDeploymentRuleResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - DeploymentRulesService
            operationId: DeploymentRulesService_BatchUpdateDeploymentRuleTitle
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchUpdateDeploymentRuleTitleRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchUpdateDeploymentRuleTitleResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/monitors/automated/v1/deployment-rules/batch:
        get:
            tags:
                - DeploymentRulesService
            operationId: DeploymentRulesService_BatchGetDeploymentRules
            parameters:
                - name: ids
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchGetDeploymentRulesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/monitors/automated/v1/deployment-rules/deployed:
        post:
            tags:
                - DeploymentRulesService
            operationId: DeploymentRulesService_DeployDeploymentRule
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeployDeploymentRuleRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeployDeploymentRuleResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/monitors/automated/v1/deployment-rules/{assetPath}:
        get:
            tags:
                - DeploymentRulesService
            operationId: DeploymentRulesService_ListDeploymentRulesForAsset
            parameters:
                - name: assetPath
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListDeploymentRulesForAssetResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/monitors/history/v1/{monitorPath}:
        get:
            tags:
                - HistoryService
            operationId: HistoryService_History
            parameters:
                - name: monitorPath
                  in: path
                  description: 'Experimental: Will be replaced with identifier'
                  required: true
                  schema:
                    type: string
                - name: metricsVersion
                  in: query
                  schema:
                    type: integer
                    format: int32
                - name: segments
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: from
                  in: query
                  schema:
                    type: string
                    format: date-time
                - name: to
                  in: query
                  schema:
                    type: string
                    format: date-time
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HistoryResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/monitors/info/v1/{id}:
        get:
            tags:
                - MonitorInfoService
            operationId: MonitorInfoService_MonitorInfo
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    $ref: '#/components/schemas/Identifier'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MonitorInfoResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/platforms/v1:
        post:
            tags:
                - PlatformsService
            operationId: PlatformsService_SetPlatformAuthentication
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SetPlatformAuthenticationRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SetPlatformAuthenticationResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/schema/v1/{id}:
        get:
            tags:
                - SchemasService
            description: Get schema of the entity its identifier.
            operationId: SchemasService_GetSchema
            parameters:
                - name: id
                  in: path
                  description: Identifier of the entity to get.
                  required: true
                  schema:
                    $ref: '#/components/schemas/Identifier'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetSchemaResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/status/v1/incidents:
        get:
            tags:
                - EntityIncidentsService
            description: Get multiple entity statuses by their identifiers.
            operationId: EntityIncidentsService_BatchGetIncidents
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchGetIncidentsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/status/v1/issues:
        get:
            tags:
                - EntityIssuesService
            description: Get multiple entity statuses by their identifiers.
            operationId: EntityIssuesService_BatchGetIssuesStatus
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchGetIssuesStatusResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/status/v1/{id}/incidents:
        get:
            tags:
                - EntityIncidentsService
            description: Get specific entity status by its identifier.
            operationId: EntityIncidentsService_GetIncidents
            parameters:
                - name: id
                  in: path
                  description: Identifier of the entity to get incidents for.
                  required: true
                  schema:
                    $ref: '#/components/schemas/Identifier'
                - name: fetchUpstreamIncidents
                  in: query
                  description: Retrieve incidents of upstream entities.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetIncidentsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/status/v1/{id}/issues:
        get:
            tags:
                - EntityIssuesService
            description: Get specific entity status by its identifier.
            operationId: EntityIssuesService_GetIssuesStatus
            parameters:
                - name: id
                  in: path
                  description: Identifier of the entity to get status for.
                  required: true
                  schema:
                    $ref: '#/components/schemas/Identifier'
                - name: fetchUpstreamStatus
                  in: query
                  description: Retrieve status of upstream entities.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetIssuesStatusResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/triage/v1/conclusions:
        get:
            tags:
                - TriageService
            description: |-
                Retrieves the latest triage state for one or more issues. This method is used by the LLM agent
                 to retrieve the current state of the issues it is working on.
            operationId: TriageService_BatchLatestConclusions
            parameters:
                - name: issueIds
                  in: query
                  description: List of issue IDs for which latest conclusion should be returned.
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchLatestConclusionsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/triage/v1/in-progress:
        patch:
            tags:
                - TriageService
            description: Marks an issue as in progress.  This method is used by the LLM agent to indicate that it has started working on an issue.
            operationId: TriageService_MarkAsInProgress
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MarkAsInProgressRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MarkAsInProgressResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/triage/v1/states:
        get:
            tags:
                - TriageService
            description: |-
                Retrieves the triage state for one or more issues. This method is used by the LLM agent
                 to retrieve the current state of the issues it is working on.
            operationId: TriageService_BatchTriageState
            parameters:
                - name: issueIds
                  in: query
                  description: List of issue IDs for which triage status should be returned.
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchTriageStateResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/triage/v1/statuses:
        get:
            tags:
                - TriageService
            description: |-
                Retrieves the triage state for one or more issues. This method is used by the LLM agent
                 to retrieve the current state of the issues it is working on.
            operationId: TriageService_ListTriageState
            parameters:
                - name: statuses
                  in: query
                  schema:
                    type: array
                    items:
                        type: integer
                        format: enum
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListTriageStateResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/triage/v1/{sessionId}/conclusion:
        post:
            tags:
                - TriageService
            description: |-
                Concludes the triage investigation for one or more issues by providing a structured conclusion
                 and supporting evidence. This method is used by the LLM agent to finalize its investigation.
            operationId: TriageService_Conclude
            parameters:
                - name: sessionId
                  in: path
                  description: Unique identifier of the triaging session, used to group related operations.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConcludeRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConcludeResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/triage/v1/{sessionId}/evidence:
        post:
            tags:
                - TriageService
            description: |-
                Records evidence collected during the triage investigation. This method allows the LLM agent
                 to incrementally add evidence as it discovers information during the investigation process.
            operationId: TriageService_RecordEvidence
            parameters:
                - name: sessionId
                  in: path
                  description: Unique identifier of the triaging session, used to group related operations.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RecordEvidenceRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RecordEvidenceResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        AcceptFeedback:
            type: object
            properties: {}
        AcceptedValuesTest:
            type: object
            properties:
                columnName:
                    type: string
                    description: Name of the column to validate
                acceptedValues:
                    type: array
                    items:
                        type: string
                    description: List of allowed values for the column
        ActivateRequest:
            type: object
            properties:
                activate:
                    type: boolean
        ActivateResponse:
            type: object
            properties: {}
        Actor:
            type: object
            properties:
                name:
                    type: string
                slack:
                    $ref: '#/components/schemas/SlackUser'
                email:
                    $ref: '#/components/schemas/EmailUser'
                pagerduty:
                    $ref: '#/components/schemas/PagerdutyUser'
        AddIssuesToIncidentRequest:
            type: object
            properties:
                incidentId:
                    type: string
                    description: ID of the incident to add issues to
                actor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor adding the issues
                at:
                    type: string
                    description: Time at which the issues were added. Defaults to the current time.
                    format: date-time
                issueIds:
                    type: array
                    items:
                        type: string
                    description: IDs of issues to add to the incident
        AddIssuesToIncidentResponse:
            type: object
            properties: {}
        AddToIncidentConclusion:
            type: object
            properties:
                incidentId:
                    type: string
                    description: ID of the existing incident that this issue should be added to.
            description: |-
                AddToIncidentConclusion indicates that the issue should be added to an existing incident.
                 This conclusion should be supported by evidence showing the connection to the existing incident.
        AgentTaskData:
            type: object
            properties:
                fetchSegmentsResult:
                    $ref: '#/components/schemas/FetchSegmentsResult'
                fetchMetricsResult:
                    $ref: '#/components/schemas/FetchMetricsResult'
        AirflowDagIdentifier:
            type: object
            properties:
                integrationId:
                    type: string
                    description: SYNQ integration_id that identifies the Airflow instance
                dagId:
                    type: string
                    description: Airflow dag_id that identifies the DAG
        AirflowTaskIdentifier:
            type: object
            properties:
                integrationId:
                    type: string
                    description: SYNQ integration_id that identifies the Airflow instance
                dagId:
                    type: string
                    description: Airflow dag_id that identifies the DAG
                taskId:
                    type: string
                    description: Airflow task_id that identifies the task within the DAG
        AnalysisEvidence:
            type: object
            properties:
                analysis:
                    type: string
                    description: |-
                        Detailed analysis of the issue, including observations, patterns, and potential implications.
                         This should provide clear reasoning for the conclusions drawn.
                sqlQueries:
                    type: array
                    items:
                        type: string
                    description: SQL queries which were executed to investigate the issue and collect the evidence.
            description: |-
                AnalysisEvidence contains detailed analysis of the issue based on collected data.
                 This should only be used as a last resort when no other more specialized evidence types
                 (history, root cause, related issues, or changes) could be collected.
                 It provides a comprehensive understanding of the problem and its implications.
        Annotation:
            type: object
            properties:
                name:
                    type: string
                    description: String key for the annotation.
                values:
                    type: array
                    items:
                        type: string
                    description: Optional list of values that the annotation can carry.
            description: |-
                Annotations can be used to annotate any entity with a key:value pair.
                 These annotations can be used for filtering and searching entities.
        AtlanConnection:
            type: object
            properties:
                name:
                    type: string
                qualifiedName:
                    type: string
        AtlanDataDomain:
            type: object
            properties:
                name:
                    type: string
                qualifiedName:
                    type: string
                parent:
                    $ref: '#/components/schemas/AtlanDataDomain'
        AtlanDataProduct:
            type: object
            properties:
                name:
                    type: string
                qualifiedName:
                    type: string
                domain:
                    $ref: '#/components/schemas/AtlanDataDomain'
        AutomatedMonitorSettings:
            type: object
            properties:
                severity:
                    type: integer
                    format: enum
                sensitivity:
                    type: integer
                    format: enum
                metricIds:
                    type: array
                    items:
                        type: integer
                        format: enum
        BatchAcceptTestSuggestionsRequest:
            type: object
            properties:
                ids:
                    type: array
                    items:
                        type: string
                recurrenceRule:
                    type: string
                    description: '[Recurrence rule](https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html) for the execution schedule of the SqlTest.'
                annotations:
                    type: array
                    items:
                        $ref: '#/components/schemas/Annotation'
                    description: |-
                        Annotations for the given test.These help filter the tests for later
                         operations like listing by API, selection in UI, analytics, etc.
                saveFailures:
                    type: boolean
                    description: Boolean flag to to toggle saving of failure runs.
        BatchAcceptTestSuggestionsResponse:
            type: object
            properties:
                identifiers:
                    type: array
                    items:
                        $ref: '#/components/schemas/Identifier'
                    description: Identifiers of created tests.
        BatchChangeResponse:
            type: object
            properties:
                changes:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/EntityChange'
                    description: |-
                        Map of change ID to EntityChange. Only includes changes that were found and accessible.
                         Missing changes are omitted from the response.
            description: BatchChangeResponse contains the requested changes mapped by their IDs.
        BatchCreateTestSuggestionsRequest:
            type: object
            properties:
                suggestions:
                    type: array
                    items:
                        $ref: '#/components/schemas/TestSuggestion'
        BatchCreateTestSuggestionsResponse:
            type: object
            properties: {}
        BatchDatabaseCoordinatesResponse:
            type: object
            properties:
                coordinates:
                    type: array
                    items:
                        $ref: '#/components/schemas/DatabaseCoordinates'
                    description: The entities that were retrieved.
            description: BatchGetEntitiesResponse is the response message for the BatchGetEntities method.
        BatchDeleteSqlTestsRequest:
            type: object
            properties:
                ids:
                    type: array
                    items:
                        type: string
                    description: IDs of the SqlTests to delete.
        BatchDeleteSqlTestsResponse:
            type: object
            properties: {}
        BatchGetDeploymentRulesResponse:
            type: object
            properties:
                deploymentRules:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/MonitorsDeploymentRuleView'
        BatchGetEntitiesResponse:
            type: object
            properties:
                entities:
                    type: array
                    items:
                        $ref: '#/components/schemas/Entity'
                    description: The entities that were retrieved.
            description: BatchGetEntitiesResponse is the response message for the BatchGetEntities method.
        BatchGetIncidentsResponse:
            type: object
            properties:
                incidents:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/Incident'
                    description: Incidents keyed by their IDs
        BatchGetIssuesResponse:
            type: object
            properties:
                issues:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/Issue'
                    description: Issues.
        BatchGetIssuesStatusResponse:
            type: object
            properties:
                responses:
                    type: array
                    items:
                        $ref: '#/components/schemas/GetIssuesStatusResponse'
            description: BatchGetIssuesStatusResponse is the response message for the BatchGetIssues method.
        BatchGetSqlTestsResponse:
            type: object
            properties:
                sqlTests:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/SqlTest'
        BatchGetTestSuggestionsForEntitiesResponse:
            type: object
            properties:
                suggestions:
                    type: array
                    items:
                        $ref: '#/components/schemas/TestSuggestion'
        BatchLatestConclusionsResponse:
            type: object
            properties:
                conclusions:
                    type: array
                    items:
                        $ref: '#/components/schemas/IssueConclusionWithEvidence'
        BatchRejectTestSuggestionsRequest:
            type: object
            properties:
                ids:
                    type: array
                    items:
                        type: string
                reason:
                    type: string
        BatchRejectTestSuggestionsResponse:
            type: object
            properties: {}
        BatchTriageStateResponse:
            type: object
            properties:
                states:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/IssueTriageState'
        BatchUpdateDeploymentRuleTitleRequest:
            type: object
            properties:
                deploymentRules:
                    type: array
                    items:
                        $ref: '#/components/schemas/UpdateDeploymentRuleTitleRequest'
        BatchUpdateDeploymentRuleTitleResponse:
            type: object
            properties: {}
        BatchUpsertSqlTestsRequest:
            type: object
            properties:
                sqlTests:
                    type: array
                    items:
                        $ref: '#/components/schemas/SqlTest'
                    description: |-
                        List of SqlTests to upsert.
                         The upsert is performed based on the unique path provided for each SqlTest.
        BatchUpsertSqlTestsResponse:
            type: object
            properties:
                createdIds:
                    type: array
                    items:
                        type: string
                    description: IDs for which SqlTests were created without error.
                updatedIds:
                    type: array
                    items:
                        type: string
                    description: IDs for which SqlTests were updated without error.
                errors:
                    type: array
                    items:
                        $ref: '#/components/schemas/BatchUpsertSqlTestsResponse_UpsertError'
                    description: Errors raised while upsert. This list will be empty if there were no errors.
        BatchUpsertSqlTestsResponse_UpsertError:
            type: object
            properties:
                id:
                    type: string
                reason:
                    type: string
            description: Details of errors encountered during the upsert operation.
        BigqueryIdentifier:
            type: object
            properties:
                project:
                    type: string
                    description: BigQuery project
        BigqueryTableIdentifier:
            type: object
            properties:
                project:
                    type: string
                    description: BigQuery project
                dataset:
                    type: string
                    description: BigQuery dataset id
                table:
                    type: string
                    description: BigQuery table name
        BusinessRuleTest:
            type: object
            properties:
                sqlExpression:
                    type: string
                    description: SQL expression that should evaluate to TRUE for valid records
        CancelIncidentRequest:
            type: object
            properties:
                incidentId:
                    type: string
                    description: ID of the incident to cancel
                actor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor cancelling the incident
                at:
                    type: string
                    description: Time at which the incident was cancelled. Defaults to the current time.
                    format: date-time
        CancelIncidentResponse:
            type: object
            properties: {}
        ChangeEvidence:
            type: object
            properties:
                entities:
                    type: array
                    items:
                        $ref: '#/components/schemas/Identifier'
                    description: |-
                        List of entities (e.g., services, configurations) that have recently changed
                         and may be related to the current issue.
                entitiesSynqPaths:
                    type: array
                    items:
                        type: string
                    description: Read-only list of paths matching entities. This is a unique path that can be used to access the entity in the Synq's UI.
                changeDescription:
                    type: string
                    description: |-
                        Detailed description of the changes that were detected and their potential
                         impact on the current issue.
                changeIds:
                    type: array
                    items:
                        type: string
                    description: When available identifiers of specific change IDs
            description: |-
                ChangeEvidence documents recent changes that may have contributed to the issue.
                 This helps in understanding if the issue is related to recent modifications.
        ClickhouseIdentifier:
            type: object
            properties:
                host:
                    type: string
                    description: Clickhouse host inclusive of port
                schema:
                    type: string
                    description: Clickhouse database
        ClickhouseTableIdentifier:
            type: object
            properties:
                host:
                    type: string
                    description: Clickhouse hostname without port
                schema:
                    type: string
                    description: Clickhouse database
                table:
                    type: string
                    description: Clickhouse table
        CllDetails:
            type: object
            properties:
                columns:
                    type: array
                    items:
                        $ref: '#/components/schemas/Column'
                    description: Column details for CLL.
                cllState:
                    type: integer
                    description: State of the CLL parse. UNSPECIFIED if CLL was not requested.
                    format: enum
                cllMessages:
                    type: array
                    items:
                        type: string
                    description: |-
                        Messages related to CLL.
                         e.g. Description of parse errors, etc.
        CloseIncidentRequest:
            type: object
            properties:
                incidentId:
                    type: string
                    description: ID of the incident to close
                actor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor closing the incident
                at:
                    type: string
                    description: Time at which the incident was closed. Defaults to the current time.
                    format: date-time
        CloseIncidentResponse:
            type: object
            properties: {}
        Code:
            type: object
            properties:
                definerIdentifier:
                    allOf:
                        - $ref: '#/components/schemas/Identifier'
                    description: |-
                        Identifier of the entity that defines or owns this code piece. This could be a dbt model,
                         SQLMesh model, or any other entity type that contains code.
                definerSynqPath:
                    type: string
                    description: Synq Path to the entity. This is a unique path that can be used to access the entity in the Synq's UI.
                stateAt:
                    type: string
                    description: |-
                        Timestamp indicating when this specific version of the code was captured or last modified.
                         This helps track the evolution of code over time.
                    format: date-time
                codeType:
                    type: integer
                    description: |-
                        Type of code being stored, which determines how SYNQ will process and analyze it.
                         This can be SQL, Python, dbt, SQLMesh, or other supported code types.
                    format: enum
                sqlDialect:
                    type: integer
                    description: |-
                        SQL dialect used in the code, if the code_type is SQL. This helps SYNQ understand
                         the specific SQL syntax and features being used.
                    format: enum
                content:
                    type: string
                    description: |-
                        The actual content of the code. This can be SQL queries, Python scripts,
                         dbt models, or any other supported code format.
                codeName:
                    type: string
                    description: Optional human-readable name for the code piece that can be used for display purposes. Might also indicate name of the file.
                filePath:
                    type: string
                    description: Optional path in e.g. git or project directory which is source of the code
            description: |-
                Code represents a piece of code or configuration that can be processed by SYNQ.
                 This message is used to store and manage various types of code artifacts, such as SQL queries,
                 Python scripts, dbt models, and other code configurations. Each code piece is associated with
                 a specific entity that defines or owns it, and includes metadata about its type and state.
        CodeChange:
            type: object
            properties:
                filePath:
                    type: string
                    description: Path to the file that was changed.
                startLine:
                    type: integer
                    description: Starting line number of the change (inclusive).
                    format: int32
                endLine:
                    type: integer
                    description: Ending line number of the change (inclusive).
                    format: int32
                changeDescription:
                    type: string
                    description: Description of what was changed in this section.
            description: CodeChange represents a specific change in a file within a commit.
        Column:
            type: object
            properties:
                columnId:
                    type: string
                name:
                    type: string
                nativeType:
                    type: string
            description: Column in a table-like asset (used in CLL mode).
        ColumnDependency:
            type: object
            properties:
                sourceNodeIdx:
                    type: integer
                    format: uint32
                sourceNodeColumnId:
                    type: string
                targetNodeIdx:
                    type: integer
                    format: uint32
                targetNodeColumnId:
                    type: string
            description: |-
                Indicates data flow between columns.
                 Source columns are used to compute value of target columns.
        CommandResult:
            type: object
            properties:
                command:
                    type: string
                status:
                    type: integer
                    format: enum
                logs:
                    type: array
                    items:
                        type: string
                error:
                    type: string
        CommitDiff:
            type: object
            properties:
                commitSha:
                    type: string
                fileDiffs:
                    type: array
                    items:
                        $ref: '#/components/schemas/FileDiff'
        CommitEvidence:
            type: object
            properties:
                changeId:
                    type: string
                    description: ID of the change that introduced the code modifications.
                relevantCodeChanges:
                    type: array
                    items:
                        $ref: '#/components/schemas/CodeChange'
                    description: List of relevant code changes in the commit.
            description: |-
                CommitEvidence documents code changes that may have contributed to the issue.
                 This helps in understanding if the issue is related to recent code modifications.
        ConcludeRequest:
            type: object
            properties:
                sessionId:
                    type: string
                    description: Unique identifier of the triaging session, used to group related operations.
                conclusion:
                    allOf:
                        - $ref: '#/components/schemas/IssueConclusion'
                    description: |-
                        IssueConclusion represents the final determination made by the LLM agent about an issue.
                         Each conclusion type must be supported by appropriate evidence collected during investigation.
                evidence:
                    type: array
                    items:
                        $ref: '#/components/schemas/EvidenceItem'
                    description: Collection of evidence items supporting the conclusion. Evidences previously recorded should not be added here.
            description: Request to conclude the triage investigation for one or more issues.
        ConcludeResponse:
            type: object
            properties: {}
            description: Response for the Conclude operation. Empty as the operation is fire-and-forget.
        ConclusionFeedback:
            type: object
            properties:
                user:
                    type: string
                feedbackAt:
                    type: string
                    format: date-time
                accept:
                    $ref: '#/components/schemas/AcceptFeedback'
                dismiss:
                    $ref: '#/components/schemas/DismissFeedback'
                retriage:
                    $ref: '#/components/schemas/ReTriageFeedback'
        Condition:
            type: object
            properties:
                expression:
                    type: string
        ConnectionMapping:
            type: object
            properties:
                atlanConnectionQualifiedName:
                    type: string
                synqDataPlatformIdentifier:
                    $ref: '#/components/schemas/DataPlatformIdentifier'
        CountRows:
            type: object
            properties: {}
        CreateIncidentRequest:
            type: object
            properties:
                issueIds:
                    type: array
                    items:
                        type: string
                    description: IDs of issues to add to the incident
                name:
                    type: string
                    description: Name of the incident
                actor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor creating the incident
                at:
                    type: string
                    description: Time at which the incident was created. Defaults to the current time.
                    format: date-time
                groupIds:
                    type: array
                    items:
                        type: string
                    description: Optional group IDs associated with the incident
        CreateIncidentResponse:
            type: object
            properties:
                incident:
                    $ref: '#/components/schemas/Incident'
        CustomIdentifier:
            type: object
            properties:
                id:
                    type: string
                    description: |-
                        Id that identifies the custom entity
                         The Id should be unique within the custom entity Identifier.
        DataPlatformIdentifier:
            type: object
            properties:
                unknown:
                    $ref: '#/components/schemas/UnknownDataPlatform'
                bigquery:
                    $ref: '#/components/schemas/BigqueryIdentifier'
                clickhouse:
                    $ref: '#/components/schemas/ClickhouseIdentifier'
                snowflake:
                    $ref: '#/components/schemas/SnowflakeIdentifier'
                redshift:
                    $ref: '#/components/schemas/RedshiftIdentifier'
                postgres:
                    $ref: '#/components/schemas/PostgresIdentifier'
                mysql:
                    $ref: '#/components/schemas/MysqlIdentifier'
                databricks:
                    $ref: '#/components/schemas/DatabricksIdentifier'
                dbtCloud:
                    $ref: '#/components/schemas/DbtCloudIdentifier'
                sqlMesh:
                    $ref: '#/components/schemas/SqlMeshIdentifier'
                duckdb:
                    $ref: '#/components/schemas/DuckDbIdentifier'
                trino:
                    $ref: '#/components/schemas/TrinoIdentifier'
                synqIntegrationId:
                    type: string
                    description: SYNQ integration ID maps to the created integration on the SYNQ platform.
            description: DataPlatformIdentifier is a unique reference to a data platform integrated with Synq.
        DataQueryEvidenceItem:
            type: object
            properties:
                queryId:
                    type: string
                    description: |-
                        Unique identifier for the query. This ID can be used to retrieve the actual SQL query
                         from the session store.
                dataAnalysis:
                    type: string
                    description: |-
                        Analysis specific to this query's results and their implications.
                         This is the analysis of the results from executing the query identified by query_id.
            description: DataQueryEvidenceItem represents a single SQL query and its analysis.
        DataQueryEvidenceV2:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/DataQueryEvidenceItem'
                    description: List of data query evidence items, each containing a query ID and its analysis.
            description: |-
                DataQueryEvidenceV2 contains SQL queries and their analysis results with query IDs.
                 This helps in understanding the issue through data analysis with query tracking.
        DatabaseCoordinates:
            type: object
            properties:
                identifiers:
                    type: array
                    items:
                        $ref: '#/components/schemas/Identifier'
                synqPaths:
                    type: array
                    items:
                        type: string
                dialectName:
                    type: string
                dialect:
                    type: integer
                    format: enum
                dataPlatform:
                    $ref: '#/components/schemas/DataPlatformIdentifier'
                dataPlatformType:
                    type: integer
                    format: enum
                connectionId:
                    type: string
                instanceName:
                    type: string
                databaseName:
                    type: string
                schemaName:
                    type: string
                objectName:
                    type: string
                sqlFqn:
                    type: string
        DatabaseFqn:
            type: object
            properties:
                instance:
                    type: string
                    description: Usually it is the hostname of the server
                databaseName:
                    type: string
                    description: Database name for databases with multi-db support
                schemaName:
                    type: string
                    description: One level
                objectName:
                    type: string
                    description: Name of the table or view
        DatabricksIdentifier:
            type: object
            properties:
                workspace:
                    type: string
                    description: URL of the databricks workspace
        DatabricksTableIdentifier:
            type: object
            properties:
                workspace:
                    type: string
                    description: URL of Databricks workspace
                catalog:
                    type: string
                    description: Databricks catalog
                schema:
                    type: string
                    description: Databricks schema
                table:
                    type: string
                    description: Databricks table or view
        DataproductIdentifier:
            type: object
            properties:
                id:
                    type: string
                    description: Dataproduct id that identifies the Dataproduct
        DbtCloudIdentifier:
            type: object
            properties:
                apiEndpoint:
                    type: string
                    description: API endpoint for Dbt Cloud
                accountId:
                    type: string
                    description: Account ID
                projectId:
                    type: string
                    description: Project ID
        DbtCloudNodeIdentifier:
            type: object
            properties:
                projectId:
                    type: string
                    description: Your dbt Cloud project id
                accountId:
                    type: string
                    description: Your dbt Cloud account id
                nodeId:
                    type: string
                    description: Dbt node_id that identifies one of dbt DAG nodes (model, test, etc)
        DbtCoreNodeIdentifier:
            type: object
            properties:
                integrationId:
                    type: string
                    description: SYNQ integration_id that identifies the dbt Core project
                nodeId:
                    type: string
                    description: Dbt node_id that identifies one of dbt DAG nodes (model, test, etc)
        DeclareIncidentConclusion:
            type: object
            properties:
                title:
                    type: string
                    description: |-
                        Suggested title for the incident that will be created.
                         Should be clear and concise to quickly communicate the situation.
                description:
                    type: string
                    description: |-
                        Detailed description of the incident situation, including:
                         - What is happening
                         - Potential impact
                         - Affected systems or services
                         - Any immediate actions needed
            description: |-
                DeclareIncidentConclusion indicates that the issue requires immediate attention as an incident.
                 This conclusion should be supported by evidence showing significant impact or risk.
        DeleteDeploymentRuleResponse:
            type: object
            properties: {}
        DeleteEntityResponse:
            type: object
            properties: {}
            description: DeleteEntityResponse is the response message for the DeleteEntity method.
        DeployDeploymentRuleRequest:
            type: object
            properties:
                deploymentRule:
                    $ref: '#/components/schemas/MonitorsDeploymentRule'
        DeployDeploymentRuleResponse:
            type: object
            properties: {}
        DismissFeedback:
            type: object
            properties:
                comment:
                    type: string
        DomainMapping:
            type: object
            properties:
                atlanDomainQualifiedName:
                    type: string
                synqDomainId:
                    type: string
        DuckDbIdentifier:
            type: object
            properties:
                motherduckAccount:
                    type: string
        EmailUser:
            type: object
            properties:
                userEmail:
                    type: string
        EmptyTest:
            type: object
            properties:
                columnNames:
                    type: array
                    items:
                        type: string
                    description: List of column names to check for empty values
        Entity:
            type: object
            properties:
                workspace:
                    type: string
                    description: Immutable workspace identifier that this entity belongs to.
                id:
                    allOf:
                        - $ref: '#/components/schemas/Identifier'
                    description: Unique identifier for this entity.
                typeId:
                    type: integer
                    description: Id of custom type or default type when 0
                    format: int32
                name:
                    type: string
                    description: Name of the entity that is displayed to the user.
                description:
                    type: string
                    description: Description of the entity that is displayed in relevant contexts. Can contain Markdown.
                createdAt:
                    type: string
                    description: Timestamp when the entity was created.
                    format: date-time
                updatedAt:
                    type: string
                    description: Timestamp when the entity was last updated.
                    format: date-time
                deletedAt:
                    type: string
                    description: Timestamp when the entity was deleted. If this is set, the entity is considered deleted.
                    format: date-time
                synqPath:
                    type: string
                    description: Return only value. Synq Path to the entity. This is a unique path that can be used to access the entity in the Synq's UI.
                synqCatalogUrl:
                    type: string
                    description: Return only value. Synq URL to the entity. This is a unique URL that can be used to access the entity in the Synq's UI.
                annotations:
                    type: array
                    items:
                        $ref: '#/components/schemas/Annotation'
                    description: Annotations attached to the entity. Annotations are key-value pairs that can be used to store metadata about the entity.
            description: |-
                Entity is the base type for all entities in the system. Its always attached to a given
                 client workspace and can be uniquely identified by its id.
        EntityChange:
            type: object
            properties:
                entityId:
                    allOf:
                        - $ref: '#/components/schemas/Identifier'
                    description: Identifier of the entity on which the change was detected when available.
                entitySynqPath:
                    type: string
                    description: SYNQ path representing entity on which the change was detected when available,
                affectedEntities:
                    type: array
                    items:
                        $ref: '#/components/schemas/Identifier'
                    description: Identifiers of entities directly affected by this change.
                affectedEntitiesSynqPaths:
                    type: array
                    items:
                        type: string
                    description: SYNQ paths of entities directly affected by this change.
                changeId:
                    type: string
                    description: Internal identifier of the change event.
                changeDetectedAt:
                    type: string
                    description: Timestamp when the change was detected by SYNQ.
                    format: date-time
                gitCommit:
                    $ref: '#/components/schemas/GitCommitChange'
                sqlDefinition:
                    $ref: '#/components/schemas/SqlDefinitionChange'
                schema:
                    $ref: '#/components/schemas/SchemaChange'
            description: |-
                EntityChange represents a change detected in an entity within the system.
                 It tracks modifications to entities like Git commits, SQL definitions, and database schemas.
        EntityIncident:
            type: object
            properties:
                id:
                    type: string
                    description: Unique identifier of the incident.
                url:
                    type: string
                    description: URL of the incident.
                name:
                    type: string
                    description: Name of the incident give by the user.
                createdBy:
                    type: string
                    description: Information about author of the incident.
                createdAt:
                    type: string
                    description: Time when the incident was created.
                    format: date-time
                updatedBy:
                    type: string
                    description: Information about the user who last updated the incident.
                updatedAt:
                    type: string
                    description: Time when the incident was last updated.
                    format: date-time
                isResolved:
                    type: boolean
                    description: Indicates if all issues inside the incident are resolved.
        EntitySelectionQuery:
            type: object
            properties:
                parts:
                    type: array
                    items:
                        $ref: '#/components/schemas/EntitySelectionQuery_QueryPart'
                operand:
                    type: integer
                    format: enum
        EntitySelectionQuery_QueryPart:
            type: object
            properties:
                identifierList:
                    $ref: '#/components/schemas/IdentifierList'
                withNameSearch:
                    $ref: '#/components/schemas/WithNameSearch'
                withType:
                    $ref: '#/components/schemas/WithType'
                withAnnotation:
                    $ref: '#/components/schemas/WithAnnotation'
                inFolder:
                    allOf:
                        - $ref: '#/components/schemas/InFolder'
                    description: synq.queries.v1.InDataPlatform in_data_platform = 5;
                query:
                    $ref: '#/components/schemas/EntitySelectionQuery'
                unsupported:
                    $ref: '#/components/schemas/Unsupported'
        EvidenceItem:
            type: object
            properties:
                evidenceId:
                    type: string
                    description: Unique identifier of the evidence item.
                issueIds:
                    type: array
                    items:
                        type: string
                    description: |-
                        List of issue IDs that should be annotated with the provided evidence.
                         Each ID must be a valid UUID.
                title:
                    type: string
                    description: |-
                        Brief, descriptive title summarizing the type of evidence collected.
                         This helps in quickly understanding the nature of the evidence.
                issueHistory:
                    allOf:
                        - $ref: '#/components/schemas/HistoryEvidence'
                    description: Historical evidence showing similar past issues that may help understand the current situation.
                rootCause:
                    allOf:
                        - $ref: '#/components/schemas/RootCauseEvidence'
                    description: Evidence pointing to the likely root cause of the issue.
                relatedIssue:
                    allOf:
                        - $ref: '#/components/schemas/RelatedIssueEvidence'
                    description: Evidence showing related issues that may be connected to the current investigation.
                change:
                    allOf:
                        - $ref: '#/components/schemas/ChangeEvidence'
                    description: Evidence of recent changes that may have contributed to the issue.
                analysis:
                    allOf:
                        - $ref: '#/components/schemas/AnalysisEvidence'
                    description: |-
                        Evidence containing detailed analysis of the issue.
                         DEPRECATED: This type will be gradually retired in favor of more specific evidence types
                         like DataQueryEvidenceV2 and OtherEvidence. Please use those types for new evidence.
                commit:
                    allOf:
                        - $ref: '#/components/schemas/CommitEvidence'
                    description: Evidence containing code changes and commit information.
                dataQueryV2:
                    allOf:
                        - $ref: '#/components/schemas/DataQueryEvidenceV2'
                    description: Evidence containing SQL queries and data analysis results with query IDs.
                other:
                    allOf:
                        - $ref: '#/components/schemas/OtherEvidence'
                    description: Evidence containing general analysis that doesn't fit into other specialized types.
                impactedDataproduct:
                    allOf:
                        - $ref: '#/components/schemas/ImpactedDataproductEvidence'
                    description: Evidence of impact on important dataproduct
                impactedOwner:
                    allOf:
                        - $ref: '#/components/schemas/ImpactedOwnerEvidence'
                    description: Evidence of serious impact on business owner
            description: |-
                EvidenceItem represents a single piece of evidence collected during the triage investigation.
                 Each evidence item must have a title and one of the specific evidence types.
        ExclusiveQueryConfig:
            type: object
            properties:
                query:
                    $ref: '#/components/schemas/EntitySelectionQuery'
        ExclusiveStaticConfig:
            type: object
            properties:
                path:
                    type: string
        Execution:
            type: object
            properties:
                id:
                    $ref: '#/components/schemas/Identifier'
                status:
                    type: integer
                    format: enum
                message:
                    type: string
                createdAt:
                    type: string
                    format: date-time
                startedAt:
                    type: string
                    format: date-time
                finishedAt:
                    type: string
                    format: date-time
                annotations:
                    type: array
                    items:
                        $ref: '#/components/schemas/Annotation'
                extras:
                    type: array
                    items:
                        $ref: '#/components/schemas/ExecutionExtra'
        ExecutionExtra:
            type: object
            properties:
                executedSql:
                    type: string
        FetchMetricsResult:
            type: object
            properties:
                queryRows:
                    type: array
                    items:
                        $ref: '#/components/schemas/FetchMetricsResult_QueryRows'
                commandContext:
                    type: string
                    description: Matches command_context of FetchMetricsCommand
        FetchMetricsResult_ColumnValue:
            type: object
            properties:
                name:
                    type: string
                isNull:
                    type: boolean
                doubleValue:
                    type: number
                    format: double
                intValue:
                    type: string
                timeValue:
                    type: string
                    format: date-time
        FetchMetricsResult_MetricsRow:
            type: object
            properties:
                segment:
                    type: string
                columnValues:
                    type: array
                    items:
                        $ref: '#/components/schemas/FetchMetricsResult_ColumnValue'
        FetchMetricsResult_QueryRows:
            type: object
            properties:
                rows:
                    type: array
                    items:
                        $ref: '#/components/schemas/FetchMetricsResult_MetricsRow'
                queryId:
                    type: string
        FetchRunsResponse:
            type: object
            properties:
                workflowRuns:
                    type: array
                    items:
                        $ref: '#/components/schemas/WorkflowRun'
        FetchSegmentsResult:
            type: object
            properties:
                rows:
                    type: array
                    items:
                        $ref: '#/components/schemas/FetchSegmentsResult_SegmentRow'
        FetchSegmentsResult_SegmentRow:
            type: object
            properties:
                segment:
                    type: string
                count:
                    type: string
        FileDiff:
            type: object
            properties:
                filePath:
                    type: string
                diff:
                    type: string
        Fqn:
            type: object
            properties:
                instanceName:
                    type: string
                databaseName:
                    type: string
                schemaName:
                    type: string
                objectName:
                    type: string
        FreshnessTest:
            type: object
            properties:
                timePartitionColumnName:
                    type: string
                    description: Name of the timestamp column used for freshness check
                timeWindowSeconds:
                    type: string
                    description: Time window for freshness check (in seconds)
        GetAtlanConnectionsResponse:
            type: object
            properties:
                connections:
                    type: array
                    items:
                        $ref: '#/components/schemas/AtlanConnection'
        GetAtlanDataProductsResponse:
            type: object
            properties:
                dataProducts:
                    type: array
                    items:
                        $ref: '#/components/schemas/AtlanDataProduct'
        GetAtlanDomainsResponse:
            type: object
            properties:
                domains:
                    type: array
                    items:
                        $ref: '#/components/schemas/AtlanDataDomain'
        GetConnectionMappingsResponse:
            type: object
            properties:
                mappings:
                    type: array
                    items:
                        $ref: '#/components/schemas/ConnectionMapping'
        GetDeployDeleteOverviewResponse:
            type: object
            properties:
                overview:
                    $ref: '#/components/schemas/MonitorsDeploymentOverview'
        GetDeployOverviewResponse:
            type: object
            properties:
                overview:
                    $ref: '#/components/schemas/MonitorsDeploymentOverview'
        GetDiffByChangeIdResponse:
            type: object
            properties:
                commitDiff:
                    $ref: '#/components/schemas/CommitDiff'
        GetDiffByCommitResponse:
            type: object
            properties:
                commitDiff:
                    $ref: '#/components/schemas/CommitDiff'
        GetDomainMappingsResponse:
            type: object
            properties:
                mappings:
                    type: array
                    items:
                        $ref: '#/components/schemas/DomainMapping'
        GetEntityResponse:
            type: object
            properties:
                entity:
                    allOf:
                        - $ref: '#/components/schemas/Entity'
                    description: The entity that was retrieved.
            description: GetEntityResponse is the response message for the GetEntity method.
        GetImpactResponse:
            type: object
            properties:
                entities:
                    type: array
                    items:
                        $ref: '#/components/schemas/ImpactedEntityGroup'
                downstreamEntities:
                    type: array
                    items:
                        $ref: '#/components/schemas/ImpactedEntityGroup'
                dataproducts:
                    type: array
                    items:
                        $ref: '#/components/schemas/ImpactedDataproduct'
                downstreamDataproducts:
                    type: array
                    items:
                        $ref: '#/components/schemas/ImpactedDataproduct'
                owners:
                    type: array
                    items:
                        $ref: '#/components/schemas/ImpactedOwner'
                downstreamOwners:
                    type: array
                    items:
                        $ref: '#/components/schemas/ImpactedOwner'
        GetIncidentsResponse:
            type: object
            properties:
                id:
                    allOf:
                        - $ref: '#/components/schemas/Identifier'
                    description: Identifier of the entity.
                entityOpenIncidents:
                    type: array
                    items:
                        $ref: '#/components/schemas/EntityIncident'
                    description: Open incident associated with the entity requested.
                upstreamOpenIncidents:
                    type: array
                    items:
                        $ref: '#/components/schemas/EntityIncident'
                    description: Open incidents associated with the upstream entities if requested.
            description: GetIncidentsResponse is the response message for the GetEntity method.
        GetIssuesStatusResponse:
            type: object
            properties:
                id:
                    allOf:
                        - $ref: '#/components/schemas/Identifier'
                    description: Identifier of the entity.
                entityIssuesStatus:
                    type: integer
                    description: Status of the entity requested.
                    format: enum
                entityIssuesSummary:
                    $ref: '#/components/schemas/GetIssuesStatusResponse_IssuesSummary'
                upstreamIssuesStatus:
                    type: integer
                    description: Optionally, the status of all upstream entities.
                    format: enum
                upstreamIssuesSummary:
                    $ref: '#/components/schemas/GetIssuesStatusResponse_IssuesSummary'
            description: GetIssuesStatusResponse is the response message for the GetEntity method.
        GetIssuesStatusResponse_IssuesSummary:
            type: object
            properties:
                totalCount:
                    type: integer
                    description: Number of issues for the entity.
                    format: int32
                warnCount:
                    type: integer
                    description: Number of issues for the entity with status 'warn'.
                    format: int32
                errorCount:
                    type: integer
                    description: Number of issues for the entity with status 'error'.
                    format: int32
                criticalCount:
                    type: integer
                    description: Number of issues for the entity with status 'critical'.
                    format: int32
        GetLineageResponse:
            type: object
            properties:
                lineage:
                    $ref: '#/components/schemas/Lineage'
        GetProductMappingsResponse:
            type: object
            properties:
                mappings:
                    type: array
                    items:
                        $ref: '#/components/schemas/ProductMapping'
        GetResponse:
            type: object
            properties:
                integration:
                    $ref: '#/components/schemas/Integration'
        GetSchemaResponse:
            type: object
            properties:
                schema:
                    allOf:
                        - $ref: '#/components/schemas/Schema'
                    description: Schema of the entity, might be empty
            description: GetEntityResponse is the response message for the GetEntity method.
        GetSqlTestAuditResponse:
            type: object
            properties:
                audit:
                    $ref: '#/components/schemas/SqlTestAudit'
        GitCommitChange:
            type: object
            properties:
                hash:
                    type: string
                    description: Hash of the Git commit.
                author:
                    allOf:
                        - $ref: '#/components/schemas/GitCommitChange_Signature'
                    description: Author information of the Git commit.
                committer:
                    allOf:
                        - $ref: '#/components/schemas/GitCommitChange_Signature'
                    description: Committer information of the Git commit.
                message:
                    type: string
                    description: Commit message describing the changes.
                shortMessage:
                    type: string
                    description: First non-empty line of the message
                fileChangeStats:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/GitCommitChange_ChangeStats'
                    description: Statistics about changes made to each modified file.
                changedFilePaths:
                    type: array
                    items:
                        type: string
                    description: All changed file paths in the Commit
                relatedChangedFilePaths:
                    type: array
                    items:
                        type: string
                    description: |-
                        File paths which are related with the entities for which changes are requested.
                         When no paths are present it means that is impossible to determine most relevant file changes.
                         This field will be empty when retrieving change by id.
                branchName:
                    type: string
                    description: Name of the branch associated with the commit, if any.
                cloneUrl:
                    type: string
                    description: URL of the Git repository where the commit was made.
                webCommitUrl:
                    type: string
                    description: URL to e.g. Github which opens the Commit
            description: GitCommitChange represents a change detected in a Git repository.
        GitCommitChange_ChangeStats:
            type: object
            properties:
                additions:
                    type: integer
                    description: Number of lines added to the file.
                    format: int32
                deletions:
                    type: integer
                    description: Number of lines removed from the file.
                    format: int32
            description: ChangeStats contains statistics about changes made to a single file.
        GitCommitChange_Signature:
            type: object
            properties:
                name:
                    type: string
                    description: Name of the Git user.
                email:
                    type: string
                    description: Email address of the Git user.
                createdAt:
                    type: string
                    description: Timestamp when the signature was created.
                    format: date-time
            description: Signature contains information about the Git user who made the changes.
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        HistoryEvidence:
            type: object
            properties:
                issueIds:
                    type: array
                    items:
                        type: string
                    description: |-
                        List of issue IDs that are similar to the currently triaged issue.
                         These historical issues can provide insights into resolution patterns.
            description: |-
                HistoryEvidence represents historical context from similar past issues.
                 This helps in understanding if the current issue is recurring or has known patterns.
        HistoryResponse:
            type: object
            properties:
                predictions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Prediction'
        Identifier:
            type: object
            properties:
                dbtCoreNode:
                    allOf:
                        - $ref: '#/components/schemas/DbtCoreNodeIdentifier'
                    description: Dbt node that identifies one of dbt DAG nodes (model, test, etc) in dbt Core project
                dbtCloudNode:
                    allOf:
                        - $ref: '#/components/schemas/DbtCloudNodeIdentifier'
                    description: Dbt node that identifies one of dbt DAG nodes (model, test, etc) in dbt Cloud project
                bigqueryTable:
                    allOf:
                        - $ref: '#/components/schemas/BigqueryTableIdentifier'
                    description: BigQuery table identifier
                snowflakeTable:
                    allOf:
                        - $ref: '#/components/schemas/SnowflakeTableIdentifier'
                    description: Snowflake table identifier
                redshiftTable:
                    allOf:
                        - $ref: '#/components/schemas/RedshiftTableIdentifier'
                    description: Redshift table identifier
                postgresTable:
                    allOf:
                        - $ref: '#/components/schemas/PostgresTableIdentifier'
                    description: Postgres table identifier
                mysqlTable:
                    allOf:
                        - $ref: '#/components/schemas/MysqlTableIdentifier'
                    description: Mysql table identifier
                clickhouseTable:
                    allOf:
                        - $ref: '#/components/schemas/ClickhouseTableIdentifier'
                    description: Clickhouse table identifier
                airflowDag:
                    allOf:
                        - $ref: '#/components/schemas/AirflowDagIdentifier'
                    description: Airflow DAG identifier
                airflowTask:
                    allOf:
                        - $ref: '#/components/schemas/AirflowTaskIdentifier'
                    description: Airflow task identifier within a given DAG
                custom:
                    allOf:
                        - $ref: '#/components/schemas/CustomIdentifier'
                    description: Custom identifier to be used with all custom created entities
                dataproduct:
                    allOf:
                        - $ref: '#/components/schemas/DataproductIdentifier'
                    description: Dataproduct identifier
                synqPath:
                    allOf:
                        - $ref: '#/components/schemas/SynqPathIdentifier'
                    description: SynqPath identifier
                databricksTable:
                    allOf:
                        - $ref: '#/components/schemas/DatabricksTableIdentifier'
                    description: Databricks table identifier
                trinoTable:
                    allOf:
                        - $ref: '#/components/schemas/TrinoTableIdentifier'
                    description: Trino table identifier
                sqlMeshModel:
                    allOf:
                        - $ref: '#/components/schemas/SqlMeshModelIdentifier'
                    description: SQLMesh Model identifier
                sqlMeshAudit:
                    allOf:
                        - $ref: '#/components/schemas/SqlMeshAuditIdentifier'
                    description: SQLMesh Audit identifier
                monitor:
                    allOf:
                        - $ref: '#/components/schemas/MonitorIdentifier'
                    description: Monitor identifier
            description: |-
                Identifier is a unique reference to an entity in SYNQ system. Entity identifiers
                 are designed to closely mimic identifiers used by data platforms and tools. To construct
                 an identifier, you need to know the kind of the entity and the ids that you would normally
                 use to identify it in the data platform or tool. For example, to identify a table in BigQuery,
                 you would need to know the project, dataset, and table names.
        IdentifierList:
            type: object
            properties:
                identifiers:
                    type: array
                    items:
                        $ref: '#/components/schemas/Identifier'
            description: Resolves to entities matching any of the given identifiers.
        ImpactedDataproduct:
            type: object
            properties:
                id:
                    $ref: '#/components/schemas/DataproductIdentifier'
                title:
                    type: string
                description:
                    type: string
                folder:
                    type: string
                priority:
                    type: integer
                    format: enum
                impactedEntities:
                    type: array
                    items:
                        $ref: '#/components/schemas/ImpactedEntityGroup'
        ImpactedDataproductEvidence:
            type: object
            properties:
                impactReason:
                    type: string
                    description: |-
                        Detailed explanation of how and why the dataproduct is impacted by the issue.
                         This should provide clear reasoning for the impact assessment.
                dataproductIds:
                    type: array
                    items:
                        type: string
                    description: |-
                        List of dataproduct IDs that are affected by the issue.
                         These IDs should reference existing dataproducts in the system.
            description: |-
                ImpactedDataproduct documents Data Products that are significantly affected by the issue.
                 This helps in understanding the business impact and prioritizing resolution efforts.
        ImpactedEntityGroup:
            type: object
            properties:
                name:
                    type: string
                ids:
                    type: array
                    items:
                        $ref: '#/components/schemas/Identifier'
                synqPaths:
                    type: array
                    items:
                        type: string
            description: Multiple Entities which form logical group, e.g. dbt Model and it's table
        ImpactedOwner:
            type: object
            properties:
                id:
                    $ref: '#/components/schemas/OwnerIdentifier'
                title:
                    type: string
                impactedEntities:
                    type: array
                    items:
                        $ref: '#/components/schemas/ImpactedEntityGroup'
        ImpactedOwnerEvidence:
            type: object
            properties:
                impactReason:
                    type: string
                    description: |-
                        Detailed explanation of how and why the owner is impacted by the issue.
                         This should provide clear reasoning for the impact assessment.
                ownerIds:
                    type: array
                    items:
                        type: string
                    description: |-
                        List of owner IDs that are affected by the issue.
                         These IDs should reference existing owners or teams in the system.
            description: |-
                ImpactedOwner documents business owners or teams that are seriously affected by the issue.
                 This helps in understanding stakeholder impact and communication requirements.
        InFolder:
            type: object
            properties:
                path:
                    type: array
                    items:
                        type: string
            description: Resolves to all entities belonging to the given folder structure.
        Incident:
            type: object
            properties:
                id:
                    type: string
                    description: ID of the incident.
                index:
                    type: integer
                    description: Index of the incident (for human-readable references).
                    format: int32
                name:
                    type: string
                    description: Name of the incident.
                issueIds:
                    type: array
                    items:
                        type: string
                    description: IDs of issues associated with this incident.
                createdBy:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor who created the incident.
                createdAt:
                    type: string
                    description: Time at which the incident was created.
                    format: date-time
                updatedBy:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor who last updated the incident.
                updatedAt:
                    type: string
                    description: Time at which the incident was last updated.
                    format: date-time
                state:
                    type: integer
                    description: State of the incident.
                    format: enum
                comments:
                    type: array
                    items:
                        $ref: '#/components/schemas/IncidentComment'
                    description: List of comments posted on the incident.
        IncidentComment:
            type: object
            properties:
                id:
                    type: string
                message:
                    type: string
                createdAt:
                    type: string
                    format: date-time
                actor:
                    $ref: '#/components/schemas/Actor'
        IngestObjectInformationRequest:
            type: object
            properties:
                connectionId:
                    type: string
                uploadId:
                    type: string
                stateAt:
                    type: string
                    description: Time at which state was collected
                    format: date-time
                objects:
                    type: array
                    items:
                        $ref: '#/components/schemas/ObjectInformation'
        IngestObjectInformationResponse:
            type: object
            properties: {}
        IngestObjectMetricsRequest:
            type: object
            properties:
                connectionId:
                    type: string
                uploadId:
                    type: string
                stateAt:
                    type: string
                    description: Time at which state was collected
                    format: date-time
                metrics:
                    type: array
                    items:
                        $ref: '#/components/schemas/ObjectMetrics'
        IngestObjectMetricsResponse:
            type: object
            properties: {}
        IngestSchemasRequest:
            type: object
            properties:
                connectionId:
                    type: string
                uploadId:
                    type: string
                stateAt:
                    type: string
                    description: Time at which state was collected
                    format: date-time
                schemas:
                    type: array
                    items:
                        $ref: '#/components/schemas/Schema'
        IngestSchemasResponse:
            type: object
            properties: {}
        IngestSqlDefinitionsRequest:
            type: object
            properties:
                connectionId:
                    type: string
                uploadId:
                    type: string
                stateAt:
                    type: string
                    description: Time at which state was collected
                    format: date-time
                sqlDefinitions:
                    type: array
                    items:
                        $ref: '#/components/schemas/SqlDefinition'
        IngestSqlDefinitionsResponse:
            type: object
            properties: {}
        IngestTaskResultsRequest:
            type: object
            properties:
                connectionId:
                    type: string
                taskId:
                    type: string
                stateAt:
                    type: string
                    description: Time at which state was collected
                    format: date-time
                taskData:
                    $ref: '#/components/schemas/AgentTaskData'
        IngestTaskResultsResponse:
            type: object
            properties: {}
        Integration:
            type: object
            properties:
                workspace:
                    type: string
                id:
                    type: string
                atlanTenantUrl:
                    type: string
                atlanApiToken:
                    type: string
                isValid:
                    type: boolean
                isActive:
                    type: boolean
                createdAt:
                    type: string
                    format: date-time
                deletedAt:
                    type: string
                    format: date-time
        Issue:
            type: object
            properties:
                id:
                    type: string
                    description: ID of the issue.
                name:
                    type: string
                    description: Name of the issue.
                message:
                    type: string
                    description: Original message of the issue.
                currentMessage:
                    type: string
                    description: Current message on the issue.
                lastErrorMessage:
                    type: string
                    description: Last error message on the issue.
                severity:
                    type: integer
                    description: Severity of the issue.
                    format: enum
                triggerEntity:
                    allOf:
                        - $ref: '#/components/schemas/Identifier'
                    description: Entity that triggered this issue.
                monitor:
                    $ref: '#/components/schemas/MonitorTriggerDetails'
                affectedEntities:
                    type: array
                    items:
                        $ref: '#/components/schemas/Identifier'
                    description: Entities affected by this issue.
                state:
                    type: integer
                    description: State of the issue.
                    format: enum
                startedAt:
                    type: string
                    description: Started at timestamp.
                    format: date-time
                updatedAt:
                    type: string
                    description: Updated at timestamp.
                    format: date-time
                endedAt:
                    type: string
                    description: Ended at timestamp.
                    format: date-time
                latestStatus:
                    type: integer
                    description: Latest status of the issue.
                    format: enum
                latestStatusActor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor that last updated the status of the issue.
                comments:
                    type: array
                    items:
                        $ref: '#/components/schemas/IssueComment'
                    description: List of comments posted on the issue.
        IssueComment:
            type: object
            properties:
                id:
                    type: string
                message:
                    type: string
                createdAt:
                    type: string
                    format: date-time
                actor:
                    $ref: '#/components/schemas/Actor'
        IssueConclusion:
            type: object
            properties:
                conclusionId:
                    type: string
                    description: Unique identifier of the conclusion.
                issueIds:
                    type: array
                    items:
                        type: string
                    description: List of issue IDs that should be concluded with the specified conclusion.
                title:
                    type: string
                    description: Brief, single-line description summarizing the triage conclusion. Max 5 words.
                summary:
                    type: string
                    description: |-
                        Detailed markdown-formatted description explaining the conclusion and the reasoning
                         based on all collected evidence.
                concludedAt:
                    type: string
                    description: Timestamp when the conclusion was made.
                    format: date-time
                isFinalConclusion:
                    type: boolean
                    description: Indicates that this is final conclusion and SRE agent won't change it unless new evidence is provided to change it.
                setExpected:
                    allOf:
                        - $ref: '#/components/schemas/SetExpectedConclusion'
                    description: Conclusion that the issue is expected behavior.
                setNoActionNeeded:
                    allOf:
                        - $ref: '#/components/schemas/SetNoActionNeededConclusion'
                    description: Conclusion that no action is needed as the issue will resolve itself.
                setFixed:
                    allOf:
                        - $ref: '#/components/schemas/SetFixedConclusion'
                    description: Conclusion that the issue has been fixed and can be closed.
                declareIncident:
                    allOf:
                        - $ref: '#/components/schemas/DeclareIncidentConclusion'
                    description: Conclusion that the issue requires incident declaration.
                addToIncident:
                    allOf:
                        - $ref: '#/components/schemas/AddToIncidentConclusion'
                    description: Conclusion that the issue should be added to an existing incident.
                requestForHumanReview:
                    allOf:
                        - $ref: '#/components/schemas/RequestForHumanReviewConclusion'
                    description: Conclusion that human review is needed for further investigation.
                unexplained:
                    allOf:
                        - $ref: '#/components/schemas/UnexplainedConclusion'
                    description: Conclusion that the issue cannot be explained and needs urgent human attention.
            description: |-
                IssueConclusion represents the final determination made by the LLM agent about an issue.
                 Each conclusion type must be supported by appropriate evidence collected during investigation.
        IssueConclusionWithEvidence:
            type: object
            properties:
                conclusion:
                    allOf:
                        - $ref: '#/components/schemas/IssueConclusion'
                    description: IssueConclusion represents the final determination made by the LLM agent about an issue.
                originalIssueIds:
                    type: array
                    items:
                        type: string
                    description: List of issues for which original conclusion was created.
                evidence:
                    type: array
                    items:
                        $ref: '#/components/schemas/EvidenceItem'
                    description: Collection of structured evidence items collected during the investigation.
                userFeedback:
                    allOf:
                        - $ref: '#/components/schemas/ConclusionFeedback'
                    description: Optional feedback given by the user on the SRE generated conclusion.
        IssueTriageState:
            type: object
            properties:
                issueId:
                    type: string
                    description: Unique identifier of the issue being investigated by the SRE agent
                status:
                    type: integer
                    description: Current status of the issue in the triage workflow, indicating the stage of investigation
                    format: enum
                lastUpdatedAt:
                    type: string
                    description: Timestamp indicating when the issue triage state was last updated
                    format: date-time
            description: |-
                IssueTriageState represents the current state of an issue in the SRE agent's investigation workflow.
                 This state is used to track the progress of automated triage and coordinate between different parts of the system.
        Limit:
            type: object
            properties:
                max:
                    type: integer
                    format: int32
                afterId:
                    type: string
        Lineage:
            type: object
            properties:
                nodes:
                    type: array
                    items:
                        $ref: '#/components/schemas/LineageNode'
                    description: Nodes in the lineage with their identities and columns.
                nodeDependencies:
                    type: array
                    items:
                        $ref: '#/components/schemas/NodeDependency'
                    description: |-
                        All edges in the lineage between nodes.
                         This can be parsed to create a graph of all the nodes.
                isCll:
                    type: boolean
                    description: Indicates whether the lineage was filtered for column level lineage (CLL).
                columnDependencies:
                    type: array
                    items:
                        $ref: '#/components/schemas/ColumnDependency'
                    description: Dependencies between columns. Populated only for CLL.
            description: Lineage defines the lineage of table-like entities.
        LineageNode:
            type: object
            properties:
                ids:
                    type: array
                    items:
                        $ref: '#/components/schemas/Identifier'
                    description: |-
                        All entities which have the same identity as this node. Must be at least one item.
                         These are sorted by closeness to the type of the start point entities.
                         e.g. if requesting lineage of a DBT source, first entity should be from DBT, similarly when viewing table it will be other tables.
                position:
                    type: integer
                    description: Position of the node in the lineage.
                    format: enum
                cllDetails:
                    allOf:
                        - $ref: '#/components/schemas/CllDetails'
                    description: Populated only for Column Level Lineage (CLL).
            description: Node in a lineage graph representing one or more entities (e.g. database table).
        ListCodeResponse:
            type: object
            properties:
                codes:
                    type: array
                    items:
                        $ref: '#/components/schemas/Code'
                    description: |-
                        List of code artifacts associated with the requested entity.
                         Each code artifact includes its content, type, and metadata about when it was captured.
            description: ListCodeResponse is the response message for the ListCode method.
        ListDeploymentRulesForAssetResponse:
            type: object
            properties:
                deploymentRules:
                    type: array
                    items:
                        $ref: '#/components/schemas/MonitorsDeploymentRuleView'
        ListDeploymentRulesResponse:
            type: object
            properties:
                deploymentRules:
                    type: array
                    items:
                        $ref: '#/components/schemas/MonitorsDeploymentRuleView'
        ListEntitiesResponse:
            type: object
            properties:
                entities:
                    type: array
                    items:
                        $ref: '#/components/schemas/Entity'
        ListIncidentsResponse:
            type: object
            properties:
                incidents:
                    type: array
                    items:
                        $ref: '#/components/schemas/Incident'
        ListIssuesRequest:
            type: object
            properties:
                from:
                    type: string
                    description: Filter by time range.
                    format: date-time
                to:
                    type: string
                    description: Filter by time range.
                    format: date-time
                limit:
                    $ref: '#/components/schemas/Limit'
                entities:
                    type: array
                    items:
                        $ref: '#/components/schemas/Identifier'
                    description: Filter by entities.
        ListIssuesResponse:
            type: object
            properties:
                issues:
                    type: array
                    items:
                        $ref: '#/components/schemas/Issue'
                    description: Issues.
        ListResponse:
            type: object
            properties:
                changes:
                    type: array
                    items:
                        $ref: '#/components/schemas/EntityChange'
                    description: |-
                        List of recent changes to the state of entity. Changes are returned from newest to oldest.
                         Each change includes:
                         - The type of change (git commit, schema change, SQL definition change)
                         - When the change occurred
                         - Details specific to the type of change
                         - Metadata about who made the change
            description: ListResponse contains the list of changes made to the requested entity.
        ListSqlTestsResponse:
            type: object
            properties:
                sqlTests:
                    type: array
                    items:
                        $ref: '#/components/schemas/SqlTest'
        ListTriageStateResponse:
            type: object
            properties:
                states:
                    type: array
                    items:
                        $ref: '#/components/schemas/IssueTriageState'
        LogEntry:
            type: object
            properties:
                id:
                    $ref: '#/components/schemas/Identifier'
                message:
                    type: string
                createdAt:
                    type: string
                    format: date-time
                startedAt:
                    type: string
                    format: date-time
                finishedAt:
                    type: string
                    format: date-time
                annotations:
                    type: array
                    items:
                        $ref: '#/components/schemas/Annotation'
        MarkAsInProgressRequest:
            type: object
            properties:
                issueIds:
                    type: array
                    items:
                        type: string
                    description: List of issue IDs for which work has started.
        MarkAsInProgressResponse:
            type: object
            properties:
                markedIssueIds:
                    type: array
                    items:
                        type: string
        MarkExpectedRequest:
            type: object
            properties:
                issueId:
                    type: string
                    description: ID of the issue to mark as expected.
                actor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor marking the issue as expected.
                time:
                    type: string
                    description: Time at which the issue was marked as expected. Defaults to the current time.
                    format: date-time
                requireNoExistingStatus:
                    type: boolean
                    description: Ignore status change if the issue already has a status.
        MarkExpectedResponse:
            type: object
            properties: {}
        MarkFixedRequest:
            type: object
            properties:
                issueId:
                    type: string
                    description: ID of the issue to mark as fixed.
                actor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor marking the issue as fixed.
                time:
                    type: string
                    description: Time at which the issue was marked as fixed. Defaults to the current time.
                    format: date-time
                requireNoExistingStatus:
                    type: boolean
                    description: Ignore status change if the issue already has a status.
        MarkFixedResponse:
            type: object
            properties: {}
        MarkInvestigatingRequest:
            type: object
            properties:
                issueId:
                    type: string
                    description: ID of the issue to mark as investigating.
                actor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor marking the issue as investigating.
                time:
                    type: string
                    description: Time at which the issue was marked as investigating. Defaults to the current time.
                    format: date-time
                requireNoExistingStatus:
                    type: boolean
                    description: Ignore status change if the issue already has a status.
        MarkInvestigatingResponse:
            type: object
            properties: {}
        MarkNoActionNeededRequest:
            type: object
            properties:
                issueId:
                    type: string
                    description: ID of the issue to mark as no action needed.
                actor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor marking the issue as no action needed.
                time:
                    type: string
                    description: Time at which the issue was marked as no action needed. Defaults to the current time.
                    format: date-time
                requireNoExistingStatus:
                    type: boolean
                    description: Ignore status change if the issue already has a status.
        MarkNoActionNeededResponse:
            type: object
            properties: {}
        MaxValueTest:
            type: object
            properties:
                columnName:
                    type: string
                    description: Name of the numeric column to validate
                maxValue:
                    type: number
                    description: Maximum allowed value (inclusive)
                    format: double
        MergeIncidentsRequest:
            type: object
            properties:
                incidentId:
                    type: string
                    description: ID of the primary incident to merge into
                actor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor performing the merge
                at:
                    type: string
                    description: Time at which the incidents were merged. Defaults to the current time.
                    format: date-time
                otherIncidentIds:
                    type: array
                    items:
                        type: string
                    description: IDs of other incidents to merge into the primary incident
        MergeIncidentsResponse:
            type: object
            properties: {}
        MetadataSource:
            type: object
            properties: {}
        Metric:
            type: object
            properties:
                metricId:
                    type: string
                freshness:
                    $ref: '#/components/schemas/MonitorFreshness'
                volume:
                    $ref: '#/components/schemas/MonitorVolume'
                value:
                    $ref: '#/components/schemas/MonitorValue'
        MinMaxTest:
            type: object
            properties:
                columnName:
                    type: string
                    description: Name of the numeric column to validate
                minValue:
                    type: number
                    description: Minimum allowed value (inclusive)
                    format: double
                maxValue:
                    type: number
                    description: Maximum allowed value (inclusive)
                    format: double
        MinValueTest:
            type: object
            properties:
                columnName:
                    type: string
                    description: Name of the numeric column to validate
                minValue:
                    type: number
                    description: Minimum allowed value (inclusive)
                    format: double
        MonitorFreshness:
            type: object
            properties:
                expression:
                    type: string
                tableMetadata:
                    $ref: '#/components/schemas/MetadataSource'
        MonitorIdentifier:
            type: object
            properties:
                monitoredId:
                    allOf:
                        - $ref: '#/components/schemas/Identifier'
                    description: Identifier of the monitored entity
                monitorId:
                    type: string
                    description: Identifier of the monitor
                segment:
                    type: string
                    description: Optional monitor segmentation identifier
                integrationId:
                    type: string
                    description: SYNQ integration_id of the monitored identifier
        MonitorInfo:
            type: object
            properties:
                id:
                    allOf:
                        - $ref: '#/components/schemas/MonitorIdentifier'
                    description: Identifier of the monitor
                name:
                    type: string
                    description: Name of the monitor
                segmentation:
                    allOf:
                        - $ref: '#/components/schemas/Segmentation'
                    description: Information how this monitor segments the data
                partitioning:
                    allOf:
                        - $ref: '#/components/schemas/Partitioning'
                    description: Information how this monitor partitions the data
                conditions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Condition'
                    description: Optional conditions which are applied to the monitor metrics retrieval
                metrics:
                    type: array
                    items:
                        $ref: '#/components/schemas/Metric'
                    description: Metrics which this monitor monitors
                monitored:
                    allOf:
                        - $ref: '#/components/schemas/Monitored'
                    description: Entity which is monitored
        MonitorInfoResponse:
            type: object
            properties:
                monitorInfo:
                    $ref: '#/components/schemas/MonitorInfo'
        MonitorSettingsChange:
            type: object
            properties:
                monitoredAssetPath:
                    type: string
                originalSettings:
                    $ref: '#/components/schemas/AutomatedMonitorSettings'
                newSettings:
                    $ref: '#/components/schemas/AutomatedMonitorSettings'
        MonitorTriggerDetails:
            type: object
            properties:
                monitor:
                    $ref: '#/components/schemas/MonitorIdentifier'
                metricId:
                    type: string
                metricVersion:
                    type: integer
                    format: int32
                segmentValue:
                    type: string
        MonitorValue:
            type: object
            properties:
                expression:
                    type: string
        MonitorVolume:
            type: object
            properties:
                expression:
                    type: string
                countRows:
                    $ref: '#/components/schemas/CountRows'
                tableMetadata:
                    $ref: '#/components/schemas/MetadataSource'
        Monitored:
            type: object
            properties:
                id:
                    allOf:
                        - $ref: '#/components/schemas/Identifier'
                    description: Identifier of the monitored entity.
                name:
                    type: string
                    description: Name of the monitored entity
                description:
                    type: string
                    description: Description of the monitored entity
                integrationId:
                    type: string
                    description: Id of the integration which provided information about monitored entity.
                objectFqn:
                    allOf:
                        - $ref: '#/components/schemas/DatabaseFqn'
                    description: Coordinates to the physical table/view which is monitored (when applicable)
                sqlDialect:
                    type: integer
                    description: SQL dialect used for monitoring
                    format: enum
        MonitorsDeploymentOverview:
            type: object
            properties:
                monitorsToCreateFor:
                    type: array
                    items:
                        type: string
                monitorsToDeleteFor:
                    type: array
                    items:
                        type: string
                activeMonitorsFor:
                    type: array
                    items:
                        type: string
                monitorSettingsChanges:
                    type: array
                    items:
                        $ref: '#/components/schemas/MonitorSettingsChange'
        MonitorsDeploymentRule:
            type: object
            properties:
                id:
                    type: string
                title:
                    type: string
                queryConfig:
                    $ref: '#/components/schemas/QueryConfig'
                exclusiveQueryConfig:
                    $ref: '#/components/schemas/ExclusiveQueryConfig'
                staticConfig:
                    $ref: '#/components/schemas/StaticConfig'
                exclusiveStaticConfig:
                    $ref: '#/components/schemas/ExclusiveStaticConfig'
                productConfig:
                    $ref: '#/components/schemas/ProductConfig'
        MonitorsDeploymentRuleView:
            type: object
            properties:
                id:
                    type: string
                title:
                    type: string
                monitorCount:
                    type: integer
                    format: int32
                queryConfig:
                    $ref: '#/components/schemas/QueryConfig'
                exclusiveQueryConfig:
                    $ref: '#/components/schemas/ExclusiveQueryConfig'
                staticConfig:
                    $ref: '#/components/schemas/StaticConfig'
                exclusiveStaticConfig:
                    $ref: '#/components/schemas/ExclusiveStaticConfig'
                productConfig:
                    $ref: '#/components/schemas/ProductConfig'
        MysqlIdentifier:
            type: object
            properties:
                host:
                    type: string
                    description: Mysql host inclusive of port
        MysqlTableIdentifier:
            type: object
            properties:
                host:
                    type: string
                    description: Mysql hostname without port
                schema:
                    type: string
                    description: Mysql database
                table:
                    type: string
                    description: Mysql table
        NodeDependency:
            type: object
            properties:
                sourceNodeIdx:
                    type: integer
                    format: uint32
                targetNodeIdx:
                    type: integer
                    format: uint32
            description: |-
                Indicates data flow between nodes.
                 Source nodes are used to compute value of target nodes.
        NotNullTest:
            type: object
            properties:
                columnNames:
                    type: array
                    items:
                        type: string
                    description: List of column names to check for NULL values
        OAuthAuthentication:
            type: object
            properties:
                clientId:
                    type: string
                clientSecret:
                    type: string
            description: Authentication using OAuth credentials
        ObjectInformation:
            type: object
            properties:
                fqn:
                    $ref: '#/components/schemas/Fqn'
                objectNativeType:
                    type: string
                isView:
                    type: boolean
                isTable:
                    type: boolean
                tags:
                    type: array
                    items:
                        $ref: '#/components/schemas/Tag'
                description:
                    type: string
        ObjectMetrics:
            type: object
            properties:
                fqn:
                    $ref: '#/components/schemas/Fqn'
                rowCount:
                    type: string
                updatedAt:
                    type: string
                    format: date-time
                sizeBytes:
                    type: string
        OtherEvidence:
            type: object
            properties:
                analysis:
                    type: string
                    description: |-
                        Detailed analysis of the issue, including observations, patterns, and potential implications.
                         This should provide clear reasoning for the conclusions drawn.
            description: |-
                OtherEvidence contains general analysis that doesn't fit into other specialized evidence types.
                 This should be used when the analysis doesn't involve SQL queries, code changes, or other
                 specialized evidence types.
        OwnerIdentifier:
            type: object
            properties:
                id:
                    type: string
                    description: Owner id that identifies the Owner
        PagerdutyUser:
            type: object
            properties:
                userId:
                    type: string
        Partitioning:
            type: object
            properties:
                column:
                    type: string
                period:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
        PasswordAuthentication:
            type: object
            properties:
                username:
                    type: string
                password:
                    type: string
            description: Authentication using a username and password
        PlatformAuthentication:
            type: object
            properties:
                token:
                    $ref: '#/components/schemas/TokenAuthentication'
                oauth:
                    $ref: '#/components/schemas/OAuthAuthentication'
                password:
                    $ref: '#/components/schemas/PasswordAuthentication'
                synqManagedKeyPair:
                    $ref: '#/components/schemas/SynqManagedKeyPairAuthentication'
                userManagedKeyPair:
                    $ref: '#/components/schemas/UserManagedKeyPairAuthentication'
        PostCommentRequest:
            type: object
            properties:
                issueId:
                    type: string
                    description: ID of the issue to post a comment on.
                actor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor posting the comment.
                comment:
                    type: string
                    description: Comment to post.
                time:
                    type: string
                    description: Time at which the comment was posted. Defaults to the current time.
                    format: date-time
        PostCommentResponse:
            type: object
            properties:
                commentId:
                    type: string
        PostgresIdentifier:
            type: object
            properties:
                host:
                    type: string
                    description: Postgres host inclusive of port
                database:
                    type: string
                    description: Postgres database
        PostgresTableIdentifier:
            type: object
            properties:
                host:
                    type: string
                    description: Postgres hostname without port
                database:
                    type: string
                    description: Postgres database
                schema:
                    type: string
                    description: Postgres schema
                table:
                    type: string
                    description: Postgres table
        Prediction:
            type: object
            properties:
                f:
                    type: string
                    description: Field
                s:
                    type: string
                    description: Segment
                m:
                    type: string
                    description: Metric
                v:
                    type: number
                    description: Value
                    format: double
                vu:
                    type: number
                    description: Upper bound
                    format: double
                vl:
                    type: number
                    description: Lower bound
                    format: double
                p:
                    type: string
                    description: Pattern
                e:
                    type: number
                    description: Expected value
                    format: double
                st:
                    type: number
                    description: Standard deviation
                    format: double
                t:
                    type: string
                    description: Timestamp
                    format: date-time
        ProductConfig:
            type: object
            properties:
                productId:
                    type: string
                severity:
                    type: integer
                    format: enum
                sensitivity:
                    type: integer
                    format: enum
                metricIds:
                    type: array
                    items:
                        type: integer
                        format: enum
                upstream:
                    $ref: '#/components/schemas/ProductConfigUpstreamStrategy'
                self:
                    $ref: '#/components/schemas/ProductConfigSelfStrategy'
                keepDeletedMonitors:
                    type: boolean
        ProductConfigSelfStrategy:
            type: object
            properties:
                all:
                    $ref: '#/components/schemas/ProductConfigSelfStrategyAll'
                selection:
                    $ref: '#/components/schemas/ProductConfigSelfStrategySelection'
        ProductConfigSelfStrategyAll:
            type: object
            properties: {}
        ProductConfigSelfStrategySelection:
            type: object
            properties:
                query:
                    $ref: '#/components/schemas/EntitySelectionQuery'
        ProductConfigUpstreamStrategy:
            type: object
            properties:
                all:
                    $ref: '#/components/schemas/ProductConfigUpstreamStrategyAll'
                sources:
                    $ref: '#/components/schemas/ProductConfigUpstreamStrategySources'
        ProductConfigUpstreamStrategyAll:
            type: object
            properties: {}
        ProductConfigUpstreamStrategySources:
            type: object
            properties: {}
        ProductMapping:
            type: object
            properties:
                atlanDataproductQualifiedName:
                    type: string
                synqDataproductIdentifier:
                    $ref: '#/components/schemas/DataproductIdentifier'
        QueryConfig:
            type: object
            properties:
                query:
                    $ref: '#/components/schemas/EntitySelectionQuery'
                severity:
                    type: integer
                    format: enum
                sensitivity:
                    type: integer
                    format: enum
                metricIds:
                    type: array
                    items:
                        type: integer
                        format: enum
                keepDeletedMonitors:
                    type: boolean
        ReTriageFeedback:
            type: object
            properties:
                instruction:
                    type: string
        RecordEvidenceRequest:
            type: object
            properties:
                sessionId:
                    type: string
                    description: Unique identifier of the triaging session, used to group related operations.
                evidence:
                    type: array
                    items:
                        $ref: '#/components/schemas/EvidenceItem'
                    description: |-
                        Collection of structured evidence items collected during the investigation.
                         Must contain at least one evidence item.
            description: Request to record evidence collected during the triage investigation.
        RecordEvidenceResponse:
            type: object
            properties: {}
            description: Response for the RecordEvidence operation. Empty as the operation is fire-and-forget.
        RedshiftIdentifier:
            type: object
            properties:
                cluster:
                    type: string
                    description: Redshift cluster
                database:
                    type: string
                    description: Redshift database
        RedshiftTableIdentifier:
            type: object
            properties:
                cluster:
                    type: string
                    description: Redshift cluster
                database:
                    type: string
                    description: Redshift database
                schema:
                    type: string
                    description: Redshift schema
                table:
                    type: string
                    description: Redshift table
        RejectedValuesTest:
            type: object
            properties:
                columnName:
                    type: string
                    description: Name of the column to validate
                rejectedValues:
                    type: array
                    items:
                        type: string
                    description: List of disallowed values for the column
        RelatedIssueEvidence:
            type: object
            properties:
                issueIds:
                    type: array
                    items:
                        type: string
                    description: |-
                        List of issue IDs that are related to the current investigation.
                         These issues may be symptoms of the same underlying problem or have dependencies.
            description: |-
                RelatedIssueEvidence identifies other issues that may be connected to the current investigation.
                 This helps in understanding broader context and potential dependencies.
        RelativeTimeTest:
            type: object
            properties:
                columnName:
                    type: string
                    description: Name of the first time column to compare
                relativeColumnName:
                    type: string
                    description: Name of the second time column that should be later than the first
        RemoveConnectionMappingsRequest:
            type: object
            properties:
                atlanConnectionQualifiedNames:
                    type: array
                    items:
                        type: string
        RemoveConnectionMappingsResponse:
            type: object
            properties: {}
        RemoveIssuesFromIncidentRequest:
            type: object
            properties:
                incidentId:
                    type: string
                    description: ID of the incident to remove issues from
                actor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor removing the issues
                at:
                    type: string
                    description: Time at which the issues were removed. Defaults to the current time.
                    format: date-time
                issueIds:
                    type: array
                    items:
                        type: string
                    description: IDs of issues to remove from the incident
        RemoveIssuesFromIncidentResponse:
            type: object
            properties: {}
        RemoveResponse:
            type: object
            properties: {}
        RenameIncidentRequest:
            type: object
            properties:
                incidentId:
                    type: string
                    description: ID of the incident to rename
                actor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor renaming the incident
                at:
                    type: string
                    description: Time at which the incident was renamed. Defaults to the current time.
                    format: date-time
                name:
                    type: string
                    description: New name for the incident
        RenameIncidentResponse:
            type: object
            properties: {}
        RequestForHumanReviewConclusion:
            type: object
            properties: {}
            description: |-
                RequestForHumanReviewConclusion indicates that the issue needs human review.
                 This conclusion should be used when:
                 - The agent has collected some evidence but cannot make a definitive conclusion
                 - The issue requires human judgment or expertise
                 - The impact is unclear or needs human assessment
        RootCauseEvidence:
            type: object
            properties:
                issueId:
                    type: string
                    description: ID of the issue that is believed to be the root cause of the current issue.
            description: |-
                RootCauseEvidence identifies the likely root cause of the issue being investigated.
                 This helps in understanding the fundamental reason behind the problem.
        RowCountTest:
            type: object
            properties: {}
        Schema:
            type: object
            properties:
                workspace:
                    type: string
                    description: Immutable workspace identifier that this entity belongs to.
                id:
                    allOf:
                        - $ref: '#/components/schemas/Identifier'
                    description: Unique identifier for this entity.
                stateAt:
                    type: string
                    description: Time when the schema was defined.
                    format: date-time
                description:
                    type: string
                    description: Optional description of the schema, might differ from the entity itself
                columns:
                    type: array
                    items:
                        $ref: '#/components/schemas/SchemaColumn'
                    description: Columns of the schema
            description: Schema represents a schema of a table like entity
        SchemaChange:
            type: object
            properties:
                columnChanges:
                    type: array
                    items:
                        $ref: '#/components/schemas/SchemaColumnChange'
                    description: List of changes made to individual columns in the schema.
            description: SchemaChange represents a change detected in a database schema.
        SchemaColumn:
            type: object
            properties:
                name:
                    type: string
                nativeType:
                    type: string
                ordinalPosition:
                    type: integer
                    format: int32
                description:
                    type: string
                tags:
                    type: array
                    items:
                        $ref: '#/components/schemas/Tag'
                isStruct:
                    type: boolean
                isRepeated:
                    type: boolean
                fields:
                    type: array
                    items:
                        $ref: '#/components/schemas/SchemaColumnField'
        SchemaColumnChange:
            type: object
            properties:
                columnAddition:
                    $ref: '#/components/schemas/SchemaColumnChange_ColumnAdditionChangeType'
                columnNativeType:
                    $ref: '#/components/schemas/SchemaColumnChange_ColumnNativeTypeChangeType'
                columnRemoval:
                    $ref: '#/components/schemas/SchemaColumnChange_ColumnRemovalChangeType'
            description: SchemaColumnChange represents a specific change to a column in the schema.
        SchemaColumnChange_ColumnAdditionChangeType:
            type: object
            properties:
                columnId:
                    type: string
                    description: Identifier of the new column.
                nativeType:
                    type: string
                    description: Data type of the new column.
                ordinalPosition:
                    type: integer
                    description: Position where the column was added in the schema.
                    format: int32
            description: ColumnAdditionChangeType represents the addition of a new column to the schema.
        SchemaColumnChange_ColumnNativeTypeChangeType:
            type: object
            properties:
                columnId:
                    type: string
                    description: Identifier of the modified column.
                previousNativeType:
                    type: string
                    description: Previous data type of the column.
                currentNativeType:
                    type: string
                    description: New data type of the column.
            description: ColumnNativeTypeChangeType represents a change in a column's data type.
        SchemaColumnChange_ColumnRemovalChangeType:
            type: object
            properties:
                columnId:
                    type: string
                    description: Identifier of the removed column.
                nativeType:
                    type: string
                    description: Native data type of the removed column.
                ordinalPosition:
                    type: integer
                    description: Original position of the column in the schema.
                    format: int32
            description: ColumnRemovalChangeType represents the removal of a column from the schema.
        SchemaColumnField:
            type: object
            properties:
                name:
                    type: string
                nativeType:
                    type: string
                description:
                    type: string
                ordinalPosition:
                    type: integer
                    format: int32
                isStruct:
                    type: boolean
                isRepeated:
                    type: boolean
                fields:
                    type: array
                    items:
                        $ref: '#/components/schemas/SchemaColumnField'
        Segmentation:
            type: object
            properties:
                column:
                    type: string
        SetConnectionMappingsRequest:
            type: object
            properties:
                mappings:
                    type: array
                    items:
                        $ref: '#/components/schemas/ConnectionMapping'
        SetConnectionMappingsResponse:
            type: object
            properties: {}
        SetExpectedConclusion:
            type: object
            properties: {}
            description: |-
                SetExpectedConclusion indicates that the issue is expected behavior and no action is needed.
                 This conclusion should be supported by evidence showing this is normal operation.
        SetFixedConclusion:
            type: object
            properties: {}
            description: |-
                SetFixedConclusion indicates that the issue has already been resolved and can be closed.
                 This conclusion should be supported by evidence showing the fix has been applied and verified.
        SetNoActionNeededConclusion:
            type: object
            properties: {}
            description: |-
                SetNoActionNeededConclusion indicates that the issue will resolve itself without intervention.
                 This conclusion should be supported by evidence showing the issue is temporary or self-healing.
        SetPlatformAuthenticationRequest:
            type: object
            properties:
                platform:
                    allOf:
                        - $ref: '#/components/schemas/DataPlatformIdentifier'
                    description: Platform identifier
                authentication:
                    allOf:
                        - $ref: '#/components/schemas/PlatformAuthentication'
                    description: Authentication details
        SetPlatformAuthenticationResponse:
            type: object
            properties:
                success:
                    type: boolean
                authentication:
                    allOf:
                        - $ref: '#/components/schemas/PlatformAuthentication'
                    description: The authentication is returned in case there is a server side set information to be passed to the client.
        SlackUser:
            type: object
            properties:
                userId:
                    type: string
        SnowflakeIdentifier:
            type: object
            properties:
                account:
                    type: string
                    description: Snowflake account
                database:
                    type: string
                    description: Snowflake database
        SnowflakeTableIdentifier:
            type: object
            properties:
                account:
                    type: string
                    description: Snowflake account
                database:
                    type: string
                    description: Snowflake database
                schema:
                    type: string
                    description: Snowflake schema
                table:
                    type: string
                    description: Snowflake table
        SplitIncidentRequest:
            type: object
            properties:
                incidentId:
                    type: string
                    description: ID of the incident to split
                actor:
                    allOf:
                        - $ref: '#/components/schemas/Actor'
                    description: Actor performing the split
                at:
                    type: string
                    description: Time at which the incident was split. Defaults to the current time.
                    format: date-time
                splitIssueIds:
                    type: array
                    items:
                        type: string
                    description: IDs of issues to move to the new incident
                splitIncidentName:
                    type: string
                    description: Name for the new incident
        SplitIncidentResponse:
            type: object
            properties:
                incident:
                    $ref: '#/components/schemas/Incident'
                splitIncident:
                    $ref: '#/components/schemas/Incident'
        SqlDefinition:
            type: object
            properties:
                fqn:
                    $ref: '#/components/schemas/Fqn'
                sql:
                    type: string
        SqlDefinitionChange:
            type: object
            properties:
                previousSql:
                    type: string
                    description: Previous version of the SQL definition.
                previousSqlStateAt:
                    type: string
                    description: Timestamp when the previous SQL state was valid.
                    format: date-time
                currentSql:
                    type: string
                    description: Current version of the SQL definition.
                currentSqlStateAt:
                    type: string
                    description: Timestamp when the current SQL state became valid.
                    format: date-time
                sqlDiff:
                    type: string
                    description: Diff showing the changes between previous and current SQL.
            description: SqlDefinitionChange represents a change detected in a SQL definition.
        SqlMeshAuditIdentifier:
            type: object
            properties:
                integrationId:
                    type: string
                    description: SYNQ integration_id that identifies the dbt Core project
                fqn:
                    type: string
                    description: SQLMesh model fully qualified name
                auditId:
                    type: string
                    description: Identifier of the audit
        SqlMeshIdentifier:
            type: object
            properties:
                defaultDatabaseInstance:
                    type: string
                    description: Default database instance for SQL Mesh
        SqlMeshModelIdentifier:
            type: object
            properties:
                integrationId:
                    type: string
                    description: SYNQ integration_id that identifies the dbt Core project
                fqn:
                    type: string
                    description: SQLMesh model fully qualified name
        SqlTest:
            type: object
            properties:
                platform:
                    allOf:
                        - $ref: '#/components/schemas/DataPlatformIdentifier'
                    description: Identifier for the data platform which the SqlTest would be executed on.
                id:
                    type: string
                    description: |-
                        Unique resource identifier for the SqlTest. This is externally maintained and can
                         be used to fetch/update/delete this test.
                name:
                    type: string
                    description: Human friendly name.
                sqlExpression:
                    type: string
                    description: A valid SQL expression which is the test.
                recurrenceRule:
                    type: string
                    description: '[Recurrence rule](https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html) for the execution schedule of the SqlTest.'
                annotations:
                    type: array
                    items:
                        $ref: '#/components/schemas/Annotation'
                    description: |-
                        Annotations for the given SqlTest.These help filter the SqlTests for later
                         operations like listing by API, selection in UI, analytics, etc.
                saveFailures:
                    type: boolean
                    description: Boolean flag to to toggle saving of failure runs.
            description: The SqlTest is a SQL test that is executed on a synq entity.
        SqlTestAudit:
            type: object
            properties:
                executionId:
                    type: string
                rowsCount:
                    type: integer
                    format: int32
                result:
                    type: string
                createdAt:
                    type: string
                    format: date-time
        StaticConfig:
            type: object
            properties:
                path:
                    type: string
                severity:
                    type: integer
                    format: enum
                sensitivity:
                    type: integer
                    format: enum
                metricIds:
                    type: array
                    items:
                        type: integer
                        format: enum
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        SynchronizeResponse:
            type: object
            properties:
                workflowRun:
                    $ref: '#/components/schemas/WorkflowRun'
                hasErrors:
                    type: boolean
        SynqManagedKeyPairAuthentication:
            type: object
            properties:
                publicKey:
                    type: string
            description: |-
                Authentication using a managed key pair.
                 The public key will be set and returned by the server after the authentication is created.
        SynqPathIdentifier:
            type: object
            properties:
                path:
                    type: string
                    description: SYNQ path that identifies the SYNQ entity, needs to be one of supported paths
        Tag:
            type: object
            properties:
                tagName:
                    type: string
                tagValue:
                    type: string
        TestSuggestion:
            type: object
            properties:
                identifier:
                    $ref: '#/components/schemas/Identifier'
                explanation:
                    type: string
                entitySynqPath:
                    type: string
                    description: Read-only path of matched entity. This is a unique path that can be used to access the entity in the Synq's UI.
                id:
                    type: string
                    description: Read-only Synq ID of matched entity. This is a unique ID that can be used to access the entity in the Synq's UI.
                notNullTest:
                    allOf:
                        - $ref: '#/components/schemas/NotNullTest'
                    description: Checks if specified columns contain no NULL values (e.g., user_id should never be null)
                emptyTest:
                    allOf:
                        - $ref: '#/components/schemas/EmptyTest'
                    description: Checks if specified columns contain empty values (e.g., description field can be empty)
                acceptedValuesTest:
                    allOf:
                        - $ref: '#/components/schemas/AcceptedValuesTest'
                    description: Validates that column values are within an allowed set (e.g., status in ['active', 'inactive', 'pending'])
                rejectedValuesTest:
                    allOf:
                        - $ref: '#/components/schemas/RejectedValuesTest'
                    description: Validates that column values are not in a forbidden set (e.g., country not in ['UNKNOWN', 'TEST'])
                uniqueTest:
                    allOf:
                        - $ref: '#/components/schemas/UniqueTest'
                    description: Ensures specified columns form a unique key combination (e.g., order_id is unique)
                freshnessTest:
                    allOf:
                        - $ref: '#/components/schemas/FreshnessTest'
                    description: Checks if data is up-to-date based on a time column (e.g., latest event_timestamp within 24h)
                rowCountTest:
                    allOf:
                        - $ref: '#/components/schemas/RowCountTest'
                    description: Validates the total number of rows in a table (e.g., orders table should have records)
                minMaxTest:
                    allOf:
                        - $ref: '#/components/schemas/MinMaxTest'
                    description: Validates numeric values are within specified range (e.g., price between 0 and 1000)
                relativeTimeTest:
                    allOf:
                        - $ref: '#/components/schemas/RelativeTimeTest'
                    description: Compares time-based columns for logical order (e.g., start_date before end_date)
                businessRuleTest:
                    allOf:
                        - $ref: '#/components/schemas/BusinessRuleTest'
                    description: Custom SQL-based business logic validation (e.g., total_amount = subtotal + tax)
                minValueTest:
                    allOf:
                        - $ref: '#/components/schemas/MinValueTest'
                    description: Validates numeric values are greater than or equal to a minimum value (e.g., price >= 0)
                maxValueTest:
                    allOf:
                        - $ref: '#/components/schemas/MaxValueTest'
                    description: Validates numeric values are less than or equal to a maximum value (e.g., price <= 1000)
            description: Test types that can be suggested
        TokenAuthentication:
            type: object
            properties:
                token:
                    type: string
            description: Authentication using a token (API key, PAT, etc)
        TrinoIdentifier:
            type: object
            properties:
                coordinator:
                    type: string
        TrinoTableIdentifier:
            type: object
            properties:
                host:
                    type: string
                    description: Hostname of the Trino instance
                catalog:
                    type: string
                    description: Trino catalog
                schema:
                    type: string
                    description: Trino schema
                table:
                    type: string
                    description: Trino table or view
        UnexplainedConclusion:
            type: object
            properties: {}
            description: |-
                UnexplainedConclusion indicates that the agent was unable to collect sufficient evidence
                 to understand or explain the issue. This conclusion requires high-priority human review
                 as it may indicate a serious or complex problem that needs immediate attention.
        UniqueTest:
            type: object
            properties:
                columnNames:
                    type: array
                    items:
                        type: string
                    description: List of columns that should form a unique combination
                timePartitionColumnName:
                    type: string
                    description: |-
                        If provided, the check will be applied to the time window of the time partition column
                         If not provided, the check will be applied to all rows
                timeWindowSeconds:
                    type: string
                    description: Time window for uniqueness check (in seconds)
        UnknownDataPlatform:
            type: object
            properties: {}
        Unsupported:
            type: object
            properties:
                queryJson:
                    type: string
            description: |-
                Collects all the parts of the query that are currently unsupported in translation.
                 These represent an internal structure that are not yet completely available on the API.
        UpdateDeploymentRuleTitleRequest:
            type: object
            properties:
                id:
                    type: string
                title:
                    type: string
        UpsertDeploymentRuleRequest:
            type: object
            properties:
                deploymentRule:
                    $ref: '#/components/schemas/MonitorsDeploymentRule'
        UpsertDeploymentRuleResponse:
            type: object
            properties: {}
        UpsertEntityRequest:
            type: object
            properties:
                entity:
                    allOf:
                        - $ref: '#/components/schemas/Entity'
                    description: The entity to create or update.
            description: UpsertEntityRequest is the request message for the UpsertEntity method.
        UpsertEntityResponse:
            type: object
            properties: {}
            description: UpsertEntityResponse is the response message for the UpsertEntity method.
        UpsertExecutionRequest:
            type: object
            properties:
                execution:
                    $ref: '#/components/schemas/Execution'
        UpsertExecutionResponse:
            type: object
            properties: {}
        UpsertLogEntryRequest:
            type: object
            properties:
                logEntry:
                    $ref: '#/components/schemas/LogEntry'
        UpsertLogEntryResponse:
            type: object
            properties: {}
        UpsertRequest:
            type: object
            properties:
                atlanTenantUrl:
                    type: string
                atlanApiToken:
                    type: string
        UpsertResponse:
            type: object
            properties:
                integration:
                    $ref: '#/components/schemas/Integration'
        UserManagedKeyPairAuthentication:
            type: object
            properties:
                privateKey:
                    type: string
            description: |-
                Authentication using a user-managed key pair.
                 The private key is stored safely as a secret. The response does not include the private key for security.
        WithAnnotation:
            type: object
            properties:
                name:
                    type: string
                acceptedValue:
                    type: string
                acceptedValues:
                    type: array
                    items:
                        type: string
            description: |-
                Resolves to all entities that contain the annotation with at least one of the provided accepted values.
                 In case of no given accepted values, all entities that carry the given annotation are returned.
        WithNameSearch:
            type: object
            properties:
                searchQuery:
                    type: string
            description: Resolves to all entities matching the given name search.
        WithType:
            type: object
            properties:
                type:
                    $ref: '#/components/schemas/WithType_Type'
                types:
                    type: array
                    items:
                        $ref: '#/components/schemas/WithType_Type'
            description: Resolves to all the entities that have the provided type.
        WithType_Type:
            type: object
            properties:
                default:
                    type: integer
                    description: Default SYNQ types
                    format: enum
                custom:
                    type: integer
                    description: Custom types as defined through synq.entities.custom.v1.TypesService
                    format: int32
        WorkflowRun:
            type: object
            properties:
                workspace:
                    type: string
                results:
                    type: array
                    items:
                        $ref: '#/components/schemas/CommandResult'
                status:
                    type: integer
                    format: enum
                startedAt:
                    type: string
                    format: date-time
                endedAt:
                    type: string
                    format: date-time
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
tags:
    - name: AtlanIntegrationService
    - name: AtlanProviderService
    - name: AtlanWorkflowService
    - name: ChangesService
      description: |-
        ChangesService provides functionality to track and retrieve changes made to entities in the system.
         It supports various types of changes including git commits, schema changes, and SQL definition changes.
         The service is designed to help track the history and evolution of entities over time.

         The service supports multiple types of changes:
         - Git commits: Changes made through version control
         - Schema changes: Modifications to database schemas
         - SQL definition changes: Updates to SQL queries and definitions
    - name: CodeService
      description: |-
        CodeService is a service for retrieving code associated with entities in the system.
         It provides functionality to access and manage code artifacts such as SQL queries,
         Python scripts, dbt models, and other code configurations that are part of SYNQ entities.
    - name: CommitsService
    - name: DatabaseCoordinatesService
      description: DatabaseCoordinatesService is a service for getting database coordinates of Entities.
    - name: DeploymentRulesService
    - name: DwhService
    - name: EntitiesService
      description: EntitiesService is a service for retriving any entity.
    - name: EntitiesService
      description: |-
        custom.EntitiesService is a service for managing custom entities. Entities can represent
         various data platform concepts such as services, consumers, applications or data pipelines
         that are not natively available in Synq.

         Entities are identified by a unique identifier and can be created, updated, read and deleted.
    - name: EntityExecutionsService
    - name: EntityIncidentsService
      description: EntityIncidentsService is the service which retrieves entity status.
    - name: EntityIssuesService
      description: EntityIssuesService is the service which retrieves entity issues status.
    - name: HistoryService
    - name: ImpactService
    - name: IncidentsService
      description: IncidentsService is a service for managing Incidents.
    - name: IssuesService
      description: IssuesService is a service for managing Issues.
    - name: LineageService
      description: |-
        LineageService allows you to fetch:
         * Entity level lineage from a starting point of one or more entities.
         * Column Level lineage from a starting point of multiple columns of a single entity.
    - name: MonitorInfoService
    - name: PlatformsService
      description: PlatformsService is a service for managing Platforms and Integrations.
    - name: SchemasService
      description: EntitiesService is a service for retriving any entity.
    - name: SqlTestsService
      description: SqlTestsService is a service for managing SqlTests.
    - name: TestSuggestionsService
    - name: TriageService
      description: |-
        Service for managing issue triage operations, allowing LLM agents to conclude investigations
         and record evidence during the triage process.
security:
    - bearerAuth: []
